{
  "address": "0x5880F43Daf818d5B1c574881F192B5b3e2565289",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ensRegistryAddr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "payees",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "generation",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "isOpen",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isCampping",
              "type": "bool"
            },
            {
              "internalType": "int40",
              "name": "power",
              "type": "int40"
            },
            {
              "internalType": "address",
              "name": "proxy",
              "type": "address"
            },
            {
              "internalType": "int256",
              "name": "openPrice",
              "type": "int256"
            },
            {
              "internalType": "int8",
              "name": "leverage",
              "type": "int8"
            }
          ],
          "indexed": false,
          "internalType": "struct Jungler.JunglerData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "CurrentJunglerState",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "PayeeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "junglerId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "bushId",
          "type": "uint8"
        }
      ],
      "name": "camp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "junglerId",
          "type": "uint256"
        }
      ],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "junglerId",
          "type": "uint256"
        }
      ],
      "name": "gank",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "generation",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAddrOfJGR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllProposals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string"
            },
            {
              "internalType": "uint88",
              "name": "bid",
              "type": "uint88"
            },
            {
              "internalType": "uint8",
              "name": "voteCount",
              "type": "uint8"
            }
          ],
          "internalType": "struct JungleGovernance.Proposal[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "junglerId",
          "type": "uint256"
        }
      ],
      "name": "getJunglerData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "generation",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "isOpen",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isCampping",
              "type": "bool"
            },
            {
              "internalType": "int40",
              "name": "power",
              "type": "int40"
            },
            {
              "internalType": "address",
              "name": "proxy",
              "type": "address"
            },
            {
              "internalType": "int256",
              "name": "openPrice",
              "type": "int256"
            },
            {
              "internalType": "int8",
              "name": "leverage",
              "type": "int8"
            }
          ],
          "internalType": "struct Jungler.JunglerData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "bushId",
          "type": "uint8"
        }
      ],
      "name": "getJunglerOnBush",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "generation",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "isOpen",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isCampping",
              "type": "bool"
            },
            {
              "internalType": "int40",
              "name": "power",
              "type": "int40"
            },
            {
              "internalType": "address",
              "name": "proxy",
              "type": "address"
            },
            {
              "internalType": "int256",
              "name": "openPrice",
              "type": "int256"
            },
            {
              "internalType": "int8",
              "name": "leverage",
              "type": "int8"
            }
          ],
          "internalType": "struct Jungler.JunglerData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "junglerId",
          "type": "uint256"
        }
      ],
      "name": "getJunglerProfile",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "generation",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "isOpen",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isCampping",
              "type": "bool"
            },
            {
              "internalType": "int40",
              "name": "power",
              "type": "int40"
            },
            {
              "internalType": "address",
              "name": "proxy",
              "type": "address"
            },
            {
              "internalType": "int256",
              "name": "openPrice",
              "type": "int256"
            },
            {
              "internalType": "int8",
              "name": "leverage",
              "type": "int8"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            }
          ],
          "internalType": "struct MetaJungle.JunglerProfile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "bushId",
          "type": "uint8"
        }
      ],
      "name": "getJunglerProfileOnBush",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "generation",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "isOpen",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isCampping",
              "type": "bool"
            },
            {
              "internalType": "int40",
              "name": "power",
              "type": "int40"
            },
            {
              "internalType": "address",
              "name": "proxy",
              "type": "address"
            },
            {
              "internalType": "int256",
              "name": "openPrice",
              "type": "int256"
            },
            {
              "internalType": "int8",
              "name": "leverage",
              "type": "int8"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            }
          ],
          "internalType": "struct MetaJungle.JunglerProfile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getOwnerJunglerList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "generation",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "isOpen",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isCampping",
              "type": "bool"
            },
            {
              "internalType": "int40",
              "name": "power",
              "type": "int40"
            },
            {
              "internalType": "address",
              "name": "proxy",
              "type": "address"
            },
            {
              "internalType": "int256",
              "name": "openPrice",
              "type": "int256"
            },
            {
              "internalType": "int8",
              "name": "leverage",
              "type": "int8"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            }
          ],
          "internalType": "struct MetaJungle.JunglerProfile[]",
          "name": "junglerList",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getVotableBushesByOwner",
      "outputs": [
        {
          "internalType": "uint8[]",
          "name": "bushIdList",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "junglerId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "namehash",
          "type": "bytes32"
        },
        {
          "internalType": "int8",
          "name": "leverage",
          "type": "int8"
        }
      ],
      "name": "open",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "payee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newBaseURI",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "slotId",
          "type": "uint8"
        }
      ],
      "name": "propose",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stage",
      "outputs": [
        {
          "internalType": "enum JungleBush.Stage",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "summon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8[]",
          "name": "bushIdList",
          "type": "uint8[]"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x328fba0ccec992e69d5399cfe2ee857b718e6a589c25386d1a5ce01551d22f47",
  "receipt": {
    "to": null,
    "from": "0x586EbeC665DEa9B5B459cB9e5562DBCA3Cf2CE13",
    "contractAddress": "0x5880F43Daf818d5B1c574881F192B5b3e2565289",
    "transactionIndex": 1,
    "gasUsed": "5228441",
    "logsBloom": "0x
    "blockHash": "0xcc5be153bb2e53a84791e1ffc894d45fe3f6fdfc75c05cdf3eb102e54e950a24",
    "transactionHash": "0x328fba0ccec992e69d5399cfe2ee857b718e6a589c25386d1a5ce01551d22f47",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 9723833,
        "transactionHash": "0x328fba0ccec992e69d5399cfe2ee857b718e6a589c25386d1a5ce01551d22f47",
        "address": "0x1cdd192fd29B05323C16B67Bf2cc035b9672C448",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005880f43daf818d5b1c574881f192b5b3e2565289"
        ],
        "data": "0x0000000000000000000000000000000000000000000069e10de76676d0800000",
        "logIndex": 1,
        "blockHash": "0xcc5be153bb2e53a84791e1ffc894d45fe3f6fdfc75c05cdf3eb102e54e950a24"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 9723833,
        "transactionHash": "0x328fba0ccec992e69d5399cfe2ee857b718e6a589c25386d1a5ce01551d22f47",
        "address": "0x1cdd192fd29B05323C16B67Bf2cc035b9672C448",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000586ebec665dea9b5b459cb9e5562dbca3cf2ce13"
        ],
        "data": "0x0000000000000000000000000000000000000000000069e10de76676d0800000",
        "logIndex": 2,
        "blockHash": "0xcc5be153bb2e53a84791e1ffc894d45fe3f6fdfc75c05cdf3eb102e54e950a24"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 9723833,
        "transactionHash": "0x328fba0ccec992e69d5399cfe2ee857b718e6a589c25386d1a5ce01551d22f47",
        "address": "0x5880F43Daf818d5B1c574881F192B5b3e2565289",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac"
        ],
        "data": "0x000000000000000000000000586ebec665dea9b5b459cb9e5562dbca3cf2ce130000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 3,
        "blockHash": "0xcc5be153bb2e53a84791e1ffc894d45fe3f6fdfc75c05cdf3eb102e54e950a24"
      }
    ],
    "blockNumber": 9723833,
    "cumulativeGasUsed": "5371638",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    "ipfs://QmRTLzaoAYSuiMVENbRpxSbrY7sgFz9K5WE5g8yvtxL485/",
    [
      "0x586EbeC665DEa9B5B459cB9e5562DBCA3Cf2CE13"
    ],
    [
      1
    ]
  ],
  "solcInputHash": "23f9bc94625cacc845c14724ec48e5bf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ensRegistryAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"generation\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCampping\",\"type\":\"bool\"},{\"internalType\":\"int40\",\"name\":\"power\",\"type\":\"int40\"},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"openPrice\",\"type\":\"int256\"},{\"internalType\":\"int8\",\"name\":\"leverage\",\"type\":\"int8\"}],\"indexed\":false,\"internalType\":\"struct Jungler.JunglerData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"CurrentJunglerState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"junglerId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"bushId\",\"type\":\"uint8\"}],\"name\":\"camp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"junglerId\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"junglerId\",\"type\":\"uint256\"}],\"name\":\"gank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generation\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddrOfJGR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"uint88\",\"name\":\"bid\",\"type\":\"uint88\"},{\"internalType\":\"uint8\",\"name\":\"voteCount\",\"type\":\"uint8\"}],\"internalType\":\"struct JungleGovernance.Proposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"junglerId\",\"type\":\"uint256\"}],\"name\":\"getJunglerData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"generation\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCampping\",\"type\":\"bool\"},{\"internalType\":\"int40\",\"name\":\"power\",\"type\":\"int40\"},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"openPrice\",\"type\":\"int256\"},{\"internalType\":\"int8\",\"name\":\"leverage\",\"type\":\"int8\"}],\"internalType\":\"struct Jungler.JunglerData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bushId\",\"type\":\"uint8\"}],\"name\":\"getJunglerOnBush\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"generation\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCampping\",\"type\":\"bool\"},{\"internalType\":\"int40\",\"name\":\"power\",\"type\":\"int40\"},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"openPrice\",\"type\":\"int256\"},{\"internalType\":\"int8\",\"name\":\"leverage\",\"type\":\"int8\"}],\"internalType\":\"struct Jungler.JunglerData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"junglerId\",\"type\":\"uint256\"}],\"name\":\"getJunglerProfile\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"generation\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCampping\",\"type\":\"bool\"},{\"internalType\":\"int40\",\"name\":\"power\",\"type\":\"int40\"},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"openPrice\",\"type\":\"int256\"},{\"internalType\":\"int8\",\"name\":\"leverage\",\"type\":\"int8\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"internalType\":\"struct MetaJungle.JunglerProfile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bushId\",\"type\":\"uint8\"}],\"name\":\"getJunglerProfileOnBush\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"generation\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCampping\",\"type\":\"bool\"},{\"internalType\":\"int40\",\"name\":\"power\",\"type\":\"int40\"},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"openPrice\",\"type\":\"int256\"},{\"internalType\":\"int8\",\"name\":\"leverage\",\"type\":\"int8\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"internalType\":\"struct MetaJungle.JunglerProfile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnerJunglerList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"generation\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCampping\",\"type\":\"bool\"},{\"internalType\":\"int40\",\"name\":\"power\",\"type\":\"int40\"},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"openPrice\",\"type\":\"int256\"},{\"internalType\":\"int8\",\"name\":\"leverage\",\"type\":\"int8\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"internalType\":\"struct MetaJungle.JunglerProfile[]\",\"name\":\"junglerList\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getVotableBushesByOwner\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"bushIdList\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"junglerId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"namehash\",\"type\":\"bytes32\"},{\"internalType\":\"int8\",\"name\":\"leverage\",\"type\":\"int8\"}],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"slotId\",\"type\":\"uint8\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"internalType\":\"enum JungleBush.Stage\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"summon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"bushIdList\",\"type\":\"uint8[]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Setup PaymentSplitter\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"payee(uint256)\":{\"details\":\"Getter for the address of the payee number `index`.\"},\"release(address)\":{\"details\":\"Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.\"},\"released(address)\":{\"details\":\"Getter for the amount of Ether already released to a payee.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"shares(address)\":{\"details\":\"Getter for the amount of shares held by an account.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalReleased()\":{\"details\":\"Getter for the total amount of Ether already released.\"},\"totalShares()\":{\"details\":\"Getter for the total shares held by payees.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"camp(uint256,uint8)\":{\"notice\":\"See {JungleInterface-camp}\"},\"close(uint256)\":{\"notice\":\"See {MetaJungleInterface-close}.\"},\"endVote()\":{\"notice\":\"See {JungleInterface-endVote}\"},\"gank(uint256)\":{\"notice\":\"See {MetaJungleInterface-gank}.\"},\"generation()\":{\"notice\":\"Current generation\"},\"getAddrOfJGR()\":{\"notice\":\"Return address of JGR contract\"},\"getAllProposals()\":{\"notice\":\"Return all proposals' contents\"},\"getJunglerData(uint256)\":{\"notice\":\"Return jungler data given jungler ID\"},\"getJunglerOnBush(uint8)\":{\"notice\":\"Return jungler data given bush ID\"},\"getJunglerProfile(uint256)\":{\"notice\":\"Get ceratin jungler profile\"},\"getJunglerProfileOnBush(uint8)\":{\"notice\":\"Return jungler profile given bush ID\"},\"getOwnerJunglerList(address)\":{\"notice\":\"Get all profile of junlers of given owner\"},\"getVotableBushesByOwner(address)\":{\"notice\":\"Return votable bushes given owner\"},\"open(uint256,bytes32,int8)\":{\"notice\":\"See {MetaJungleInterface-open}.\"},\"propose(string,uint8)\":{\"notice\":\"See {JungleInterface-propose}\"},\"stage()\":{\"notice\":\"Stage of proposing or voting\"},\"startVote()\":{\"notice\":\"See {JungleInterface-startVote}\"},\"summon()\":{\"notice\":\"see {MetaJungleInterface-summon}\"},\"tokenURI(uint256)\":{\"notice\":\"Customized {ERC721-tokenURI}\"},\"vote(uint256,uint8[])\":{\"notice\":\"See {JungleInterface-vote}\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MetaJungle.sol\":\"MetaJungle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/finance/PaymentSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n */\\ncontract PaymentSplitter is Context {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = address(this).balance + _totalReleased;\\n        uint256 payment = (totalReceived * _shares[account]) / _totalShares - _released[account];\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _released[account] = _released[account] + payment;\\n        _totalReleased = _totalReleased + payment;\\n\\n        Address.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n}\\n\",\"keccak256\":\"0x5b5c64239a7980f0c2c5baa584a3350912c7260db32f6d6544a2755f59a0c488\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/JungleBush.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Jungler.sol\\\";\\n\\n/**\\n * @title Bushes that allow junglers to camp\\n * @author Justa Liang\\n */\\nabstract contract JungleBush is Jungler {\\n    /// @dev Max number of bushes\\n    uint8 internal constant ENV_CAPACITY = 100;\\n\\n    /// @dev Reward per second\\n    uint256 private constant REWARD_PER_SEC = 4e11;\\n\\n    /// @dev Map from bush ID to jungler ID (Faker the GOAT!!!)\\n    mapping(uint8 => uint256) internal _hideOnBush;\\n\\n    /// @dev Map from bush ID to update time\\n    mapping(uint8 => uint256) private _bushTimer;\\n\\n    /// @dev Map from bush ID to generation\\n    mapping(uint8 => uint32) internal _bushGeneration;\\n\\n    /**\\n     * @notice Stage of proposing or voting\\n     */\\n    Stage public stage;\\n    enum Stage {\\n        PROPOSING,\\n        VOTING\\n    }\\n\\n    /// @dev Voting stage (bush locked)\\n    modifier votingStage() {\\n        require(stage == Stage.VOTING, \\\"not in voting stage\\\");\\n        _;\\n    }\\n\\n    /// @dev Proposing stage (bush not locked)\\n    modifier proposingStage() {\\n        require(stage == Stage.PROPOSING, \\\"not in proposing stage\\\");\\n        _;\\n    }\\n\\n    /// @dev Initialize stage\\n    constructor() {\\n        stage = Stage.PROPOSING;\\n    }\\n\\n    /**\\n     * @notice See {JungleInterface-camp}\\n     */\\n    function camp(uint256 junglerId, uint8 bushId)\\n        external\\n        override\\n        checkOwner(junglerId)\\n        proposingStage\\n    {\\n        require(bushId < ENV_CAPACITY, \\\"invalid bush ID\\\");\\n\\n        // get attacker data\\n        JunglerData storage attackerData = _junglerData[junglerId];\\n        require(!attackerData.isCampping, \\\"already on bush\\\");\\n\\n        // get defender data\\n        uint256 defenderId = _hideOnBush[bushId];\\n        JunglerData storage defenderData = _junglerData[defenderId];\\n\\n        // attacker should be of this generation\\n        require(attackerData.generation == generation, \\\"jungler too old\\\");\\n\\n        // if the defender jungler is at open position or out of generation\\n        // then will be replaced regardless of power\\n        if (!defenderData.isOpen && defenderData.generation == generation) {\\n            require(\\n                attackerData.power > defenderData.power,\\n                \\\"attacker can't overtake\\\"\\n            );\\n        }\\n\\n        // update on-chain data\\n        defenderData.isCampping = false;\\n        attackerData.isCampping = true;\\n        _hideOnBush[bushId] = junglerId;\\n\\n        if (defenderId != 0) {\\n            uint256 reward = (block.timestamp - _bushTimer[bushId]) *\\n                REWARD_PER_SEC;\\n            uint256 selfFund = balanceOf(address(this));\\n            if (reward > selfFund) {\\n                reward = selfFund;\\n            }\\n            _jgrContract.transferFrom(\\n                address(this),\\n                ownerOf(defenderId),\\n                reward\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Return votable bushes given owner\\n     */\\n    function getVotableBushesByOwner(address owner)\\n        public\\n        view\\n        returns (uint8[] memory bushIdList)\\n    {\\n        uint8 votableBushCount = 0;\\n        uint256 junglerId;\\n        for (uint8 bushId = 0; bushId < ENV_CAPACITY; bushId++) {\\n            junglerId = _hideOnBush[bushId];\\n            if (\\n                _exists(junglerId) &&\\n                ownerOf(junglerId) == owner &&\\n                _bushGeneration[bushId] != generation\\n            ) {\\n                votableBushCount++;\\n            }\\n        }\\n        bushIdList = new uint8[](votableBushCount);\\n        uint8 idx = 0;\\n        for (uint8 bushId = 0; bushId < ENV_CAPACITY; bushId++) {\\n            junglerId = _hideOnBush[bushId];\\n            if (\\n                _exists(junglerId) &&\\n                ownerOf(junglerId) == owner &&\\n                _bushGeneration[bushId] != generation\\n            ) {\\n                bushIdList[idx] = bushId;\\n                idx++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Return jungler data given bush ID\\n     */\\n    function getJunglerOnBush(uint8 bushId)\\n        public\\n        view\\n        returns (JunglerData memory)\\n    {\\n        require(bushId < ENV_CAPACITY, \\\"invalid bush ID\\\");\\n        return getJunglerData(_hideOnBush[bushId]);\\n    }\\n}\\n\",\"keccak256\":\"0xd28938ef98bd894e05c55067f9693aa8b9729e8d1e61b445aa48f516b7929fe4\",\"license\":\"MIT\"},\"contracts/JungleGovernance.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./JungleBush.sol\\\";\\n\\n/**\\n * @title Governance of jungle community\\n * @author Justa Liang\\n */\\nabstract contract JungleGovernance is JungleBush {\\n    /// @dev Max number of proposals\\n    uint8 private constant SLOT_SIZE = 10;\\n\\n    /// @dev Interval of proposing stage\\n    uint256 private constant PROPOSAL_INTERVAL = 25 days;\\n\\n    /// @dev Interval of voting stage\\n    uint256 private constant VOTE_INTERVAL = 3 days;\\n\\n    /// @dev Latest update time\\n    uint256 private _latestUpdateTime;\\n\\n    /// @dev Proposal contents\\n    struct Proposal {\\n        address proposer;\\n        string baseURI;\\n        uint88 bid;\\n        uint8 voteCount;\\n    }\\n\\n    /// @dev List of proposals\\n    Proposal[] private _proposals;\\n\\n    /// @dev Map from generation to baseURI\\n    mapping(uint32 => string) internal _baseURIofGeneration;\\n\\n    /// @dev Initialize timer and first-generation baseURI\\n    constructor(string memory baseURI) {\\n        _latestUpdateTime = block.timestamp;\\n        _baseURIofGeneration[generation] = baseURI;\\n    }\\n\\n    /**\\n     * @notice See {JungleInterface-propose}\\n     */\\n    function propose(string calldata newBaseURI, uint8 slotId)\\n        external\\n        payable\\n        override\\n    {\\n        // if not reach max number of proposals, just push back\\n        if (_proposals.length < SLOT_SIZE) {\\n            _proposals.push(\\n                Proposal(_msgSender(), newBaseURI, uint88(msg.value), 0)\\n            );\\n        }\\n        // else replace the proposal on slot if given enough bid\\n        else {\\n            require(slotId < SLOT_SIZE, \\\"index out of range\\\");\\n            Proposal memory propOnSlot = _proposals[slotId];\\n            require(msg.value >= propOnSlot.bid + 0.01 ether, \\\"not enough bid\\\");\\n            Address.sendValue(payable(propOnSlot.proposer), propOnSlot.bid);\\n            _proposals[slotId] = Proposal(\\n                _msgSender(),\\n                newBaseURI,\\n                uint88(msg.value),\\n                0\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice See {JungleInterface-vote}\\n     */\\n    function vote(uint256 proposalId, uint8[] calldata bushIdList)\\n        external\\n        override\\n    {\\n        uint8 bushCount = uint8(bushIdList.length);\\n        Proposal storage target = _proposals[proposalId];\\n\\n        // verify every bush\\n        for (uint8 bushId = 0; bushId < bushCount; bushId++) {\\n            uint256 junglerId = _hideOnBush[bushId];\\n            require(ownerOf(junglerId) == _msgSender(), \\\"not owner\\\");\\n            require(_bushGeneration[bushId] < generation, \\\"already voted\\\");\\n            _bushGeneration[bushId] = generation;\\n        }\\n\\n        // update vote count\\n        target.voteCount += bushCount;\\n\\n        // reward voter\\n        _jgrContract.transfer(\\n            _msgSender(),\\n            ((balanceOf(address(this)) * bushCount) * 8) / 10 / ENV_CAPACITY\\n        );\\n    }\\n\\n    /**\\n     * @notice See {JungleInterface-startVote}\\n     */\\n    function startVote() external override proposingStage {\\n        require(\\n            block.timestamp >= _latestUpdateTime + PROPOSAL_INTERVAL,\\n            \\\"not yet to start vote\\\"\\n        );\\n        require(_proposals.length > 0, \\\"no proposal to vote\\\");\\n        stage = Stage.VOTING;\\n        _latestUpdateTime = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice See {JungleInterface-endVote}\\n     */\\n    function endVote() external override votingStage {\\n        require(\\n            block.timestamp >= _latestUpdateTime + VOTE_INTERVAL,\\n            \\\"not yet to end vote\\\"\\n        );\\n        stage = Stage.PROPOSING;\\n        _latestUpdateTime = block.timestamp;\\n\\n        // determine winning proposal\\n        uint8 maxVote = 0;\\n        uint8 maxIdx = 0;\\n        for (uint8 i = 0; i < _proposals.length; i++) {\\n            if (_proposals[i].voteCount > maxVote) {\\n                maxVote = _proposals[i].voteCount;\\n                maxIdx = i;\\n            }\\n        }\\n        Proposal memory winningProp = _proposals[maxIdx];\\n\\n        // reward winner\\n        _jgrContract.transfer(\\n            winningProp.proposer,\\n            (balanceOf(address(this))) / 10\\n        );\\n\\n        // clear slot\\n        delete _proposals;\\n\\n        // evolve to next generation\\n        generation++;\\n        _baseURIofGeneration[generation] = winningProp.baseURI;\\n    }\\n\\n    /**\\n     * @notice Return all proposals' contents\\n     */\\n    function getAllProposals() external view returns (Proposal[] memory) {\\n        return _proposals;\\n    }\\n}\\n\",\"keccak256\":\"0x078cf0bb5bc74291f5cc9df46057dc264cf38ab3ef50b988f5563443340e9051\",\"license\":\"MIT\"},\"contracts/JungleResource.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @title Resource in the jungle (ERC20)\\n * @author Justa Liang\\n */\\ncontract JungleResource is ERC20 {\\n    /// @dev Setup name, symbol and initial supply\\n    constructor(address founder) ERC20(\\\"JungleResource\\\", \\\"JGR\\\") {\\n        _mint(_msgSender(), 5e23);\\n        _mint(founder, 5e23);\\n    }\\n}\\n\",\"keccak256\":\"0x67a9c076734a832813f3a75ff99520ef91a4a9ecd84ada68f809e70137823453\",\"license\":\"MIT\"},\"contracts/Jungler.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./MetaJungleInterface.sol\\\";\\nimport \\\"./JungleResource.sol\\\";\\n\\n/// @notice ENS registry to get chainlink resolver\\ninterface ENS {\\n    function resolver(bytes32) external view returns (Resolver);\\n}\\n\\n/// @notice Chainlink resolver to get price feed proxy\\ninterface Resolver {\\n    function addr(bytes32) external view returns (address);\\n}\\n\\n/**\\n * @title Define the actions of Jungler\\n * @author Justa Liang\\n */\\nabstract contract Jungler is MetaJungleInterface, ERC721Enumerable {\\n    /**\\n     * @notice Current generation\\n     */\\n    uint32 public generation;\\n\\n    /// @dev ENS interface\\n    ENS private _ens;\\n\\n    /// @dev JungleResource contract\\n    IERC20 internal _jgrContract;\\n\\n    /// @dev Map from jungler ID to on-chain data\\n    mapping(uint256 => JunglerData) internal _junglerData;\\n    struct JunglerData {\\n        // state\\n        uint32 generation; // the generation in which the jungler bred\\n        bool isOpen; // if position is open\\n        bool isCampping; // if jungler is campping\\n        int40 power; // net worth of the jungler\\n        // position\\n        address proxy; // proxy of Chainlink price feed\\n        int256 openPrice; // price when opening position\\n        int8 leverage; // leverage when opening position\\n    }\\n\\n    /// @dev event emit\\n    event CurrentJunglerState(uint256 indexed id, JunglerData data);\\n\\n    /// @dev Initialize generation, setup ENS registry and deploy JungleResource\\n    constructor(address ensRegistryAddr) {\\n        generation = 1;\\n        _ens = ENS(ensRegistryAddr);\\n        _jgrContract = IERC20(new JungleResource(_msgSender()));\\n    }\\n\\n    /// @dev Check jungler's owner\\n    modifier checkOwner(uint256 junglerId) {\\n        require(_isApprovedOrOwner(msg.sender, junglerId), \\\"not owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice see {MetaJungleInterface-summon}\\n     */\\n    function summon() external override {\\n        // cost 1000 JGR\\n        _jgrContract.transferFrom(_msgSender(), address(this), 1e18);\\n\\n        // mint token\\n        uint256 newId = totalSupply() + 1;\\n        _safeMint(_msgSender(), newId);\\n\\n        // allocate data\\n        _junglerData[newId] = JunglerData(\\n            generation,\\n            false,\\n            false,\\n            1e6,\\n            address(0),\\n            0,\\n            0\\n        );\\n        emit CurrentJunglerState(newId, _junglerData[newId]);\\n    }\\n\\n    /**\\n     * @notice See {MetaJungleInterface-open}.\\n     */\\n    function open(\\n        uint256 junglerId,\\n        bytes32 namehash,\\n        int8 leverage\\n    ) external override checkOwner(junglerId) {\\n        JunglerData storage target = _junglerData[junglerId];\\n\\n        // check generation\\n        require(target.generation == generation, \\\"generation error\\\");\\n\\n        // check position state\\n        require(!target.isOpen, \\\"already open\\\");\\n\\n        // resolve namehash\\n        address proxy = _resolve(namehash);\\n        require(proxy != address(0), \\\"invalid namehash\\\");\\n\\n        // get current price\\n        AggregatorV3Interface pricefeed = AggregatorV3Interface(proxy);\\n        (, int256 currPrice, , , ) = pricefeed.latestRoundData();\\n\\n        // update on-chain data\\n        target.isOpen = true;\\n        target.proxy = proxy;\\n        target.openPrice = currPrice;\\n        target.leverage = leverage;\\n        emit CurrentJunglerState(junglerId, target);\\n    }\\n\\n    /**\\n     * @notice See {MetaJungleInterface-close}.\\n     */\\n    function close(uint256 junglerId) external override checkOwner(junglerId) {\\n        JunglerData storage target = _junglerData[junglerId];\\n        require(target.isOpen, \\\"already closed\\\");\\n\\n        // get current price\\n        AggregatorV3Interface pricefeed = AggregatorV3Interface(target.proxy);\\n        (, int256 currPrice, , , ) = pricefeed.latestRoundData();\\n\\n        // update on-chain data\\n        target.isOpen = false;\\n        target.power += int40(\\n            ((currPrice - target.openPrice) * target.leverage * target.power) /\\n                (target.openPrice * 10)\\n        );\\n        require(target.power >= 0, \\\"out of margin\\\");\\n        emit CurrentJunglerState(junglerId, target);\\n    }\\n\\n    /**\\n     * @notice See {MetaJungleInterface-gank}.\\n     */\\n    function gank(uint256 junglerId) external override {\\n        JunglerData storage target = _junglerData[junglerId];\\n        require(target.isOpen, \\\"should be open\\\");\\n\\n        // get current price\\n        AggregatorV3Interface pricefeed = AggregatorV3Interface(target.proxy);\\n        (, int256 currPrice, , , ) = pricefeed.latestRoundData();\\n\\n        // compute margin and check\\n        int256 margin = target.power +\\n            ((currPrice - target.openPrice) * target.leverage * target.power) /\\n            (target.openPrice * 10);\\n        require(margin < 0, \\\"not out of margin\\\");\\n\\n        // bankrupt the jungler\\n        target.power = 0;\\n        emit CurrentJunglerState(junglerId, target);\\n\\n        // reward the ganker\\n        _jgrContract.transfer(_msgSender(), 1e17);\\n    }\\n\\n    /**\\n     * @notice Return jungler data given jungler ID\\n     */\\n    function getJunglerData(uint256 junglerId)\\n        public\\n        view\\n        returns (JunglerData memory)\\n    {\\n        require(_exists(junglerId), \\\"query for nonexistent jungler\\\");\\n        return _junglerData[junglerId];\\n    }\\n\\n    /// @dev Resolve ENS-namehash to Chainlink price feed proxy\\n    function _resolve(bytes32 namehash) internal view returns (address) {\\n        Resolver resolver = _ens.resolver(namehash);\\n        return resolver.addr(namehash);\\n    }\\n}\\n\",\"keccak256\":\"0xa02543a20b22254a25e43df396336f92d0826abfeea6026d376084ccd9e56972\",\"license\":\"MIT\"},\"contracts/MetaJungle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/finance/PaymentSplitter.sol\\\";\\nimport \\\"./JungleGovernance.sol\\\";\\n\\ncontract MetaJungle is JungleGovernance, PaymentSplitter {\\n    using Strings for uint40;\\n\\n    //// @dev Max display power\\n    uint40 private constant MAX_DISPLAY_POWER = 7243;\\n\\n    /// @dev Setup PaymentSplitter\\n    constructor(\\n        address ensRegistryAddr,\\n        string memory baseURI,\\n        address[] memory payees,\\n        uint256[] memory shares\\n    )\\n        ERC721(\\\"MetaJungler\\\", \\\"MJG\\\")\\n        Jungler(ensRegistryAddr)\\n        JungleBush()\\n        JungleGovernance(baseURI)\\n        PaymentSplitter(payees, shares)\\n    {}\\n\\n    /**\\n     * @notice Customized {ERC721-tokenURI}\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        uint32 targetGeneration = _junglerData[tokenId].generation;\\n        uint40 powerDisplay = uint40(_junglerData[tokenId].power) / 1e3;\\n        if (powerDisplay > MAX_DISPLAY_POWER) {\\n            powerDisplay = MAX_DISPLAY_POWER;\\n        }\\n        string memory genBaseURI = _baseURIofGeneration[targetGeneration];\\n        return string(abi.encodePacked(genBaseURI, powerDisplay.toString()));\\n    }\\n\\n    /**\\n     * @notice Return address of JGR contract\\n     */\\n    function getAddrOfJGR() public view returns (address) {\\n        return address(_jgrContract);\\n    }\\n\\n    struct JunglerProfile {\\n        uint256 id;\\n        uint32 generation;\\n        bool isOpen;\\n        bool isCampping;\\n        int40 power;\\n        address proxy;\\n        int256 openPrice;\\n        int8 leverage;\\n        string tokenURI;\\n    }\\n\\n    /**\\n     * @notice Get ceratin jungler profile\\n     */\\n    function getJunglerProfile(uint256 junglerId)\\n        public\\n        view\\n        returns (JunglerProfile memory)\\n    {\\n        require(_exists(junglerId), \\\"query for nonexistant jungler\\\");\\n        JunglerData memory target = _junglerData[junglerId];\\n        return\\n            JunglerProfile(\\n                junglerId,\\n                target.generation,\\n                target.isOpen,\\n                target.isCampping,\\n                target.power,\\n                target.proxy,\\n                target.openPrice,\\n                target.leverage,\\n                tokenURI(junglerId)\\n            );\\n    }\\n\\n    /**\\n     * @notice Get all profile of junlers of given owner\\n     */\\n    function getOwnerJunglerList(address owner)\\n        external\\n        view\\n        returns (JunglerProfile[] memory junglerList)\\n    {\\n        uint256 tokenBalance = balanceOf(owner);\\n        junglerList = new JunglerProfile[](tokenBalance);\\n        uint256 tokenId;\\n        for (uint256 idx; idx < tokenBalance; idx++) {\\n            tokenId = tokenOfOwnerByIndex(owner, idx);\\n            junglerList[idx] = getJunglerProfile(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Return jungler profile given bush ID\\n     */\\n    function getJunglerProfileOnBush(uint8 bushId)\\n        public\\n        view\\n        returns (JunglerProfile memory)\\n    {\\n        require(bushId < ENV_CAPACITY, \\\"invalid bush ID\\\");\\n        return getJunglerProfile(_hideOnBush[bushId]);\\n    }\\n}\\n\",\"keccak256\":\"0xeb0b6dd650fa6c756c597afc1702eb8951f8227ad64076fc28db8f0337f5dce1\",\"license\":\"MIT\"},\"contracts/MetaJungleInterface.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Interface of JungleFinance\\n * @author Justa Liang\\n */\\ninterface MetaJungleInterface {\\n    //-------------------------\\n    // Jungler\\n    //-------------------------\\n\\n    /**\\n     * @notice Summon a jungler\\n     */\\n    function summon() external;\\n\\n    /**\\n     * @notice Jungler: Open a long position with leverage\\n     * @param junglerId ID of the jungler\\n     * @param namehash ENS namehash of chainlink price feed\\n     * @param leverage Perpetual leverage\\n     */\\n    function open(\\n        uint256 junglerId,\\n        bytes32 namehash,\\n        int8 leverage\\n    ) external;\\n\\n    /**\\n     * @notice Jungler: Close the position and update its net worth\\n     * @param junglerId ID of the jungler\\n     */\\n    function close(uint256 junglerId) external;\\n\\n    /**\\n     * @notice Jungler: Gank a jungler who ran out of margin\\n     * @param junglerId ID of the jungler\\n     */\\n    function gank(uint256 junglerId) external;\\n\\n    //-------------------------\\n    // Bush\\n    //-------------------------\\n\\n    /**\\n     * @notice Bush: Camp at certain bush\\n     * @param junglerId ID of the jungler\\n     * @param bushId ID of the bush on grassland\\n     */\\n    function camp(uint256 junglerId, uint8 bushId) external;\\n\\n    //-------------------------\\n    // Governance\\n    //-------------------------\\n\\n    /**\\n     * @notice Governance: Propose the next-generation skin\\n     * @param newBaseURI Base URI of proposer's designed NFTs\\n     * @param slotId Which slot to propose\\n     */\\n    function propose(string calldata newBaseURI, uint8 slotId) external payable;\\n\\n    /**\\n     * @notice Governance: Vote the proposals using owned bush\\n     * @param proposalId ID of the proposal\\n     * @param bushIdList List of bush ID that voter occupied\\n     */\\n    function vote(uint256 proposalId, uint8[] calldata bushIdList) external;\\n\\n    /**\\n     * @notice Governance: Start the vote\\n     */\\n    function startVote() external;\\n\\n    /**\\n     * @notice Governance: End the vote\\n     */\\n    function endVote() external;\\n}\\n\",\"keccak256\":\"0x426a9252a9b46d675b53ebfef8c1f3fad665a8aa2e1daf2c7b519b4380cc20b4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200614f3803806200614f83398101604081905262000034916200053e565b818184866040518060400160405280600b81526020016a26b2ba30a53ab733b632b960a91b815250604051806040016040528060038152602001624d4a4760e81b8152508160009080519060200190620000909291906200038f565b508051620000a69060019060208401906200038f565b5050600a8054600163ffffffff1990911617600160201b600160c01b0319166401000000006001600160a01b0385160217905550620000e462000259565b604051620000f2906200041e565b620000fe919062000658565b604051809103906000f0801580156200011b573d6000803e3d6000fd5b50600b80546001600160a01b0319166001600160a01b0392909216919091179055506010805460ff1916905542601155600a5463ffffffff166000908152601360209081526040909120825162000175928401906200038f565b50508051825114620001a45760405162461bcd60e51b81526004016200019b90620006d1565b60405180910390fd5b6000825111620001c85760405162461bcd60e51b81526004016200019b906200076e565b60005b82518110156200024c5762000237838281518110620001fa57634e487b7160e01b600052603260045260246000fd5b60200260200101518383815181106200022357634e487b7160e01b600052603260045260246000fd5b60200260200101516200025d60201b60201c565b80620002438162000886565b915050620001cb565b50505050505050620008d0565b3390565b6001600160a01b038216620002865760405162461bcd60e51b81526004016200019b9062000685565b60008111620002a95760405162461bcd60e51b81526004016200019b90620007a5565b6001600160a01b03821660009081526016602052604090205415620002e25760405162461bcd60e51b81526004016200019b9062000723565b60188054600181019091557fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e0180546001600160a01b0319166001600160a01b03841690811790915560009081526016602052604090208190556014546200034c9082906200082e565b6014556040517f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac906200038390849084906200066c565b60405180910390a15050565b8280546200039d9062000849565b90600052602060002090601f016020900481019282620003c157600085556200040c565b82601f10620003dc57805160ff19168380011785556200040c565b828001600101855582156200040c579182015b828111156200040c578251825591602001919060010190620003ef565b506200041a9291506200042c565b5090565b610d0a806200544583390190565b5b808211156200041a57600081556001016200042d565b80516001600160a01b03811681146200045b57600080fd5b919050565b600082601f83011262000471578081fd5b815160206200048a620004848362000808565b620007dc565b8281528181019085830183850287018401881015620004a7578586fd5b855b85811015620004d057620004bd8262000443565b84529284019290840190600101620004a9565b5090979650505050505050565b600082601f830112620004ee578081fd5b8151602062000501620004848362000808565b82815281810190858301838502870184018810156200051e578586fd5b855b85811015620004d05781518452928401929084019060010162000520565b6000806000806080858703121562000554578384fd5b6200055f8562000443565b602086810151919550906001600160401b03808211156200057e578586fd5b818801915088601f83011262000592578586fd5b815181811115620005a757620005a7620008ba565b620005bb601f8201601f19168501620007dc565b8181528a85838601011115620005cf578788fd5b875b82811015620005ee578481018601518282018701528501620005d1565b82811115620005ff57888684840101525b5060408a01519097509350508083111562000618578485fd5b6200062689848a0162000460565b945060608801519250808311156200063c578384fd5b50506200064c87828801620004dd565b91505092959194509250565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252602c908201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060408201526b7a65726f206164647265737360a01b606082015260800190565b60208082526032908201527f5061796d656e7453706c69747465723a2070617965657320616e6420736861726040820152710cae640d8cadccee8d040dad2e6dac2e8c6d60731b606082015260800190565b6020808252602b908201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960408201526a206861732073686172657360a81b606082015260800190565b6020808252601a908201527f5061796d656e7453706c69747465723a206e6f20706179656573000000000000604082015260600190565b6020808252601d908201527f5061796d656e7453706c69747465723a20736861726573206172652030000000604082015260600190565b6040518181016001600160401b0381118282101715620008005762000800620008ba565b604052919050565b60006001600160401b03821115620008245762000824620008ba565b5060209081020190565b60008219821115620008445762000844620008a4565b500190565b6002810460018216806200085e57607f821691505b602082108114156200088057634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156200089d576200089d620008a4565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b614b6580620008e06000396000f3fe60806040526004361061020a5760003560e01c80636352211e11610119578063b88d4fde116100a6578063b88d4fde1461062f578063b92239461461064f578063c040e6b814610664578063c87b56dd14610686578063cceb68f5146106a6578063cd355bff146106c8578063ce7c2ac2146106dd578063e2c73cb7146106fd578063e33b7de31461072a578063e985e9c51461073f578063fa4c20871461075f57610251565b80636352211e146104e057806370a08231146105005780637efad966146105205780638b83209b1461054057806395d89b41146105605780639852595c14610575578063a22cb46514610595578063a706bb10146105b5578063aac27d23146105e2578063ac1ac96b1461060f57610251565b80632570eb7d116101975780632570eb7d146103c15780632f745c59146103e1578063313dc99a14610401578063363dd19e146104145780633a98ef391461042957806342842e0e1461043e5780634c0a6af01461045e5780634f6ccce71461047357806352ef8a7f146104935780635c8a0676146104c057610251565b806301ffc9a71461025657806306fdde031461028c578063081812fc146102ae578063095ea7b3146102db5780630aebeb4e146102fd5780631300cc381461031d578063172195221461033d57806318160ddd1461035f578063191655871461038157806323b872dd146103a157610251565b36610251577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be77061023861077f565b34604051610247929190613bd3565b60405180910390a1005b600080fd5b34801561026257600080fd5b50610276610271366004613810565b610783565b6040516102839190613d89565b60405180910390f35b34801561029857600080fd5b506102a16107b0565b6040516102839190613dc5565b3480156102ba57600080fd5b506102ce6102c93660046138c3565b610842565b6040516102839190613bbf565b3480156102e757600080fd5b506102fb6102f63660046137c9565b61088e565b005b34801561030957600080fd5b506102fb6103183660046138c3565b610926565b34801561032957600080fd5b506102fb6103383660046138db565b610b22565b34801561034957600080fd5b50610352610d41565b6040516102839190614761565b34801561036b57600080fd5b50610374610d4d565b6040516102839190613d94565b34801561038d57600080fd5b506102fb61039c36600461361d565b610d53565b3480156103ad57600080fd5b506102fb6103bc36600461368d565b610e98565b3480156103cd57600080fd5b506102fb6103dc3660046138c3565b610ed0565b3480156103ed57600080fd5b506103746103fc3660046137c9565b6110ad565b6102fb61040f366004613848565b611102565b34801561042057600080fd5b506102fb6114d5565b34801561043557600080fd5b506103746116bd565b34801561044a57600080fd5b506102fb61045936600461368d565b6116c3565b34801561046a57600080fd5b506102fb6116de565b34801561047f57600080fd5b5061037461048e3660046138c3565b611784565b34801561049f57600080fd5b506104b36104ae3660046138c3565b6117df565b604051610283919061474e565b3480156104cc57600080fd5b506102fb6104db366004613953565b611980565b3480156104ec57600080fd5b506102ce6104fb3660046138c3565b611b3b565b34801561050c57600080fd5b5061037461051b36600461361d565b611b70565b34801561052c57600080fd5b506104b361053b3660046139ba565b611bb4565b34801561054c57600080fd5b506102ce61055b3660046138c3565b611bfb565b34801561056c57600080fd5b506102a1611c39565b34801561058157600080fd5b5061037461059036600461361d565b611c48565b3480156105a157600080fd5b506102fb6105b036600461379c565b611c63565b3480156105c157600080fd5b506105d56105d036600461361d565b611d31565b6040516102839190613c43565b3480156105ee57600080fd5b506106026105fd36600461361d565b611e09565b6040516102839190613d42565b34801561061b57600080fd5b506102fb61062a36600461398f565b611fe5565b34801561063b57600080fd5b506102fb61064a3660046136cd565b61226d565b34801561065b57600080fd5b506102fb6122ac565b34801561067057600080fd5b506106796125fc565b6040516102839190613d9d565b34801561069257600080fd5b506102a16106a13660046138c3565b612605565b3480156106b257600080fd5b506106bb612729565b6040516102839190613ca3565b3480156106d457600080fd5b506102ce61285e565b3480156106e957600080fd5b506103746106f836600461361d565b61286d565b34801561070957600080fd5b5061071d6107183660046138c3565b612888565b60405161028391906146de565b34801561073657600080fd5b5061037461294c565b34801561074b57600080fd5b5061027661075a366004613655565b612952565b34801561076b57600080fd5b5061071d61077a3660046139ba565b612980565b3390565b60006001600160e01b0319821663780e9d6360e01b14806107a857506107a8826129c7565b90505b919050565b6060600080546107bf906149e6565b80601f01602080910402602001604051908101604052809291908181526020018280546107eb906149e6565b80156108385780601f1061080d57610100808354040283529160200191610838565b820191906000526020600020905b81548152906001019060200180831161081b57829003601f168201915b5050505050905090565b600061084d82612a07565b6108725760405162461bcd60e51b815260040161086990614353565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061089982611b3b565b9050806001600160a01b0316836001600160a01b031614156108cd5760405162461bcd60e51b8152600401610869906144d7565b806001600160a01b03166108df61077f565b6001600160a01b031614806108fb57506108fb8161075a61077f565b6109175760405162461bcd60e51b8152600401610869906141b1565b6109218383612a24565b505050565b806109313382612a92565b61094d5760405162461bcd60e51b8152600401610869906146bb565b6000828152600c602052604090208054600160201b900460ff166109835760405162461bcd60e51b815260040161086990614693565b600081600001600b9054906101000a90046001600160a01b031690506000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109da57600080fd5b505afa1580156109ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1291906139d4565b5050855460ff60201b19168655506001850154909250610a349150600a6148c2565b835460028501546001860154600160301b909204600490810b900b91600091820b90910b90610a639085614964565b610a6d91906148c2565b610a7791906148c2565b610a81919061485c565b83548490600690610a9d908490600160301b900460040b6147b3565b92506101000a81548164ffffffffff021916908360040b64ffffffffff16021790555060008360000160069054906101000a900460040b60040b1215610af55760405162461bcd60e51b815260040161086990614635565b84600080516020614b1083398151915284604051610b139190614740565b60405180910390a25050505050565b60128054829160009186908110610b4957634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201905060005b8260ff168160ff161015610c395760ff81166000908152600d6020526040902054610b8561077f565b6001600160a01b0316610b9782611b3b565b6001600160a01b031614610bbd5760405162461bcd60e51b8152600401610869906146bb565b600a5460ff83166000908152600f602052604090205463ffffffff918216911610610bfa5760405162461bcd60e51b815260040161086990613edb565b50600a5460ff82166000908152600f60205260409020805463ffffffff191663ffffffff90921691909117905580610c3181614a60565b915050610b5c565b508181600201600b8282829054906101000a900460ff16610c5a9190614815565b825460ff9182166101009390930a928302919092021990911617905550600b546001600160a01b031663a9059cbb610c9061077f565b6064600a60ff8716610ca130611b70565b610cab9190614945565b610cb6906008614945565b610cc0919061488a565b610cca919061488a565b6040518363ffffffff1660e01b8152600401610ce7929190613bd3565b602060405180830381600087803b158015610d0157600080fd5b505af1158015610d15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3991906137f4565b505050505050565b600a5463ffffffff1681565b60085490565b6001600160a01b038116600090815260166020526040902054610d885760405162461bcd60e51b815260040161086990613f53565b600060155447610d9891906147fd565b6001600160a01b0383166000908152601760209081526040808320546014546016909352908320549394509192610dcf9085614945565b610dd9919061488a565b610de391906149a3565b905080610e025760405162461bcd60e51b815260040161086990614117565b6001600160a01b038316600090815260176020526040902054610e269082906147fd565b6001600160a01b038416600090815260176020526040902055601554610e4d9082906147fd565b601555610e5a8382612b17565b7fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b0568382604051610e8b929190613bd3565b60405180910390a1505050565b610ea9610ea361077f565b82612a92565b610ec55760405162461bcd60e51b815260040161086990614598565b610921838383612bb3565b6000818152600c602052604090208054600160201b900460ff16610f065760405162461bcd60e51b815260040161086990613f2b565b600081600001600b9054906101000a90046001600160a01b031690506000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610f5d57600080fd5b505afa158015610f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9591906139d4565b50505091505060008360010154600a610fae91906148c2565b845460028601546001870154600160301b909204600490810b900b91600091820b90910b90610fdd9086614964565b610fe791906148c2565b610ff191906148c2565b610ffb919061485c565b84546110159190600160301b9004600490810b900b614772565b9050600081126110375760405162461bcd60e51b815260040161086990614518565b835464ffffffffff60301b191684556040518590600080516020614b1083398151915290611066908790614740565b60405180910390a2600b546001600160a01b031663a9059cbb61108761077f565b67016345785d8a00006040518363ffffffff1660e01b8152600401610ce7929190613bd3565b60006110b883611b70565b82106110d65760405162461bcd60e51b815260040161086990613e07565b506001600160a01b03821660009081526006602090815260408083208484529091529020545b92915050565b601254600a1115611220576012604051806080016040528061112261077f565b6001600160a01b0316815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505050346001600160581b0316602080840191909152604090920181905283546001808201865594825290829020835160039092020180546001600160a01b0319166001600160a01b03909216919091178155828201518051939491936111d49392850192919091019061342f565b5060408201516002909101805460609093015160ff16600160581b0260ff60581b196001600160581b039093166001600160581b03199094169390931791909116919091179055610921565b600a60ff8216106112435760405162461bcd60e51b815260040161086990614209565b600060128260ff168154811061126957634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516080810190915260039092020180546001600160a01b0316825260018101805492939192918401916112a9906149e6565b80601f01602080910402602001604051908101604052809291908181526020018280546112d5906149e6565b80156113225780601f106112f757610100808354040283529160200191611322565b820191906000526020600020905b81548152906001019060200180831161130557829003601f168201915b5050509183525050600291909101546001600160581b0381166020830152600160581b900460ff1660409182015281015190915061136790662386f26fc1000061483a565b6001600160581b031634101561138f5760405162461bcd60e51b815260040161086990614570565b6113aa816000015182604001516001600160581b0316612b17565b60405180608001604052806113bd61077f565b6001600160a01b0316815260200185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506001600160581b03341660208301526040909101526012805460ff851690811061143d57634e487b7160e01b600052603260045260246000fd5b600091825260209182902083516003929092020180546001600160a01b0319166001600160a01b0390921691909117815582820151805191926114889260018501929091019061342f565b5060408201516002909101805460609093015160ff16600160581b0260ff60581b196001600160581b039093166001600160581b0319909416939093179190911691909117905550505050565b600b546001600160a01b03166323b872dd6114ee61077f565b30670de0b6b3a76400006040518463ffffffff1660e01b815260040161151693929190613bec565b602060405180830381600087803b15801561153057600080fd5b505af1158015611544573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156891906137f4565b506000611573610d4d565b61157e9060016147fd565b905061159161158b61077f565b82612ce0565b6040805160e081018252600a5463ffffffff908116825260006020808401828152848601838152620f4240606087019081526080870185815260a0880186815260c089018781528b8852600c9096528987209851895495519451935192516001600160a01b0316600160581b02600160581b600160f81b031960049490940b64ffffffffff16600160301b0264ffffffffff60301b19951515600160281b0260ff60281b19971515600160201b0260ff60201b1994909c1663ffffffff1990991698909817929092169990991794909416949094179190911691909117169390931784559151600184015590516002830180549190920b60ff1660ff1990911617905590518291600080516020614b10833981519152916116b29190614740565b60405180910390a250565b60145490565b6109218383836040518060200160405280600081525061226d565b600060105460ff16600181111561170557634e487b7160e01b600052602160045260246000fd5b146117225760405162461bcd60e51b8152600401610869906143fa565b6220f58060115461173391906147fd565b4210156117525760405162461bcd60e51b815260040161086990613dd8565b6012546117715760405162461bcd60e51b815260040161086990614473565b6010805460ff1916600117905542601155565b600061178e610d4d565b82106117ac5760405162461bcd60e51b8152600401610869906145e9565b600882815481106117cd57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6117e76134b3565b6117f082612a07565b61180c5760405162461bcd60e51b8152600401610869906144a0565b6000600c60008481526020019081526020016000206040518060e00160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900460ff161515151581526020016000820160059054906101000a900460ff161515151581526020016000820160069054906101000a900460040b60040b60040b815260200160008201600b9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182015481526020016002820160009054906101000a900460000b60000b60000b815250509050604051806101200160405280848152602001826000015163ffffffff168152602001826020015115158152602001826040015115158152602001826060015160040b815260200182608001516001600160a01b031681526020018260a0015181526020018260c0015160000b815260200161197785612605565b90529392505050565b8261198b3382612a92565b6119a75760405162461bcd60e51b8152600401610869906146bb565b6000848152600c60205260409020600a54815463ffffffff9081169116146119e15760405162461bcd60e51b8152600401610869906143d0565b8054600160201b900460ff1615611a0a5760405162461bcd60e51b81526004016108699061418b565b6000611a1585612cfe565b90506001600160a01b038116611a3d5760405162461bcd60e51b815260040161086990614010565b60008190506000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611a7d57600080fd5b505afa158015611a91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab591906139d4565b50508654600160201b60ff60201b1990911617600160581b600160f81b031916600160581b6001600160a01b03881602178755506001860181905560028601805460ff191660ff60008b900b16179055604051909250899150600080516020614b1083398151915290611b29908790614740565b60405180910390a25050505050505050565b6000818152600260205260408120546001600160a01b0316806107a85760405162461bcd60e51b81526004016108699061427f565b60006001600160a01b038216611b985760405162461bcd60e51b815260040161086990614235565b506001600160a01b031660009081526003602052604090205490565b611bbc6134b3565b606460ff831610611bdf5760405162461bcd60e51b81526004016108699061432a565b60ff82166000908152600d60205260409020546107a8906117df565b600060188281548110611c1e57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031692915050565b6060600180546107bf906149e6565b6001600160a01b031660009081526017602052604090205490565b611c6b61077f565b6001600160a01b0316826001600160a01b03161415611c9c5760405162461bcd60e51b815260040161086990613fdd565b8060056000611ca961077f565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155611ced61077f565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611d259190613d89565b60405180910390a35050565b60606000611d3e83611b70565b9050806001600160401b03811115611d6657634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611d9f57816020015b611d8c6134b3565b815260200190600190039081611d845790505b5091506000805b82811015611e0157611db885826110ad565b9150611dc3826117df565b848281518110611de357634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080611df990614a21565b915050611da6565b505050919050565b6060600080805b606460ff82161015611eae5760ff81166000908152600d60205260409020549150611e3a82612a07565b8015611e5f5750846001600160a01b0316611e5483611b3b565b6001600160a01b0316145b8015611e895750600a5460ff82166000908152600f602052604090205463ffffffff908116911614155b15611e9c5782611e9881614a60565b9350505b80611ea681614a60565b915050611e10565b508160ff166001600160401b03811115611ed857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611f01578160200160208202803683370190505b5092506000805b606460ff82161015611fdc5760ff81166000908152600d60205260409020549250611f3283612a07565b8015611f575750856001600160a01b0316611f4c84611b3b565b6001600160a01b0316145b8015611f815750600a5460ff82166000908152600f602052604090205463ffffffff908116911614155b15611fca5780858360ff1681518110611faa57634e487b7160e01b600052603260045260246000fd5b60ff9092166020928302919091019091015281611fc681614a60565b9250505b80611fd481614a60565b915050611f08565b50505050919050565b81611ff03382612a92565b61200c5760405162461bcd60e51b8152600401610869906146bb565b600060105460ff16600181111561203357634e487b7160e01b600052602160045260246000fd5b146120505760405162461bcd60e51b8152600401610869906143fa565b606460ff8316106120735760405162461bcd60e51b81526004016108699061432a565b6000838152600c602052604090208054600160281b900460ff16156120aa5760405162461bcd60e51b815260040161086990614162565b60ff83166000908152600d6020908152604080832054808452600c909252909120600a54835463ffffffff9081169116146120f75760405162461bcd60e51b815260040161086990613f02565b8054600160201b900460ff1615801561211c5750600a54815463ffffffff9081169116145b1561215a5780548354600160301b91829004600490810b810b92909104810b900b1361215a5760405162461bcd60e51b81526004016108699061439f565b805460ff60281b199081168255835416600160281b17835560ff85166000908152600d602052604090208690558115610d395760ff85166000908152600e6020526040812054645d21dba000906121b190426149a3565b6121bb9190614945565b905060006121c830611b70565b9050808211156121d6578091505b600b546001600160a01b03166323b872dd306121f187611b3b565b856040518463ffffffff1660e01b815260040161221093929190613bec565b602060405180830381600087803b15801561222a57600080fd5b505af115801561223e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226291906137f4565b505050505050505050565b61227e61227861077f565b83612a92565b61229a5760405162461bcd60e51b815260040161086990614598565b6122a684848484612e0f565b50505050565b600160105460ff1660018111156122d357634e487b7160e01b600052602160045260246000fd5b146122f05760405162461bcd60e51b815260040161086990614543565b6203f48060115461230191906147fd565b4210156123205760405162461bcd60e51b8152600401610869906142c8565b6010805460ff1916905542601155600080805b60125460ff821610156123e7578260ff1660128260ff168154811061236857634e487b7160e01b600052603260045260246000fd5b6000918252602090912060039091020160020154600160581b900460ff1611156123d55760128160ff16815481106123b057634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201600201600b9054906101000a900460ff1692508091505b806123df81614a60565b915050612333565b50600060128260ff168154811061240e57634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516080810190915260039092020180546001600160a01b03168252600181018054929391929184019161244e906149e6565b80601f016020809104026020016040519081016040528092919081815260200182805461247a906149e6565b80156124c75780601f1061249c576101008083540402835291602001916124c7565b820191906000526020600020905b8154815290600101906020018083116124aa57829003601f168201915b5050509183525050600291909101546001600160581b0381166020830152600160581b900460ff16604090910152600b5481519192506001600160a01b03169063a9059cbb90600a61251830611b70565b612522919061488a565b6040518363ffffffff1660e01b815260040161253f929190613bd3565b602060405180830381600087803b15801561255957600080fd5b505af115801561256d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259191906137f4565b5061259e60126000613501565b600a805463ffffffff169060006125b483614a3c565b82546101009290920a63ffffffff818102199093169183160217909155602083810151600a549092166000908152601382526040902082516122a6945090929091019061342f565b60105460ff1681565b6000818152600c602052604081205460609163ffffffff821691612636906103e890600160301b900460040b61489e565b9050611c4b64ffffffffff8216111561264e5750611c4b5b63ffffffff82166000908152601360205260408120805461266e906149e6565b80601f016020809104026020016040519081016040528092919081815260200182805461269a906149e6565b80156126e75780601f106126bc576101008083540402835291602001916126e7565b820191906000526020600020905b8154815290600101906020018083116126ca57829003601f168201915b50505050509050806126ff8364ffffffffff16612e42565b604051602001612710929190613b8d565b6040516020818303038152906040529350505050919050565b60606012805480602002602001604051908101604052809291908181526020016000905b8282101561285557600084815260209081902060408051608081019091526003850290910180546001600160a01b031682526001810180549293919291840191612796906149e6565b80601f01602080910402602001604051908101604052809291908181526020018280546127c2906149e6565b801561280f5780601f106127e45761010080835404028352916020019161280f565b820191906000526020600020905b8154815290600101906020018083116127f257829003601f168201915b5050509183525050600291909101546001600160581b038116602080840191909152600160581b90910460ff16604090920191909152908252600192909201910161274d565b50505050905090565b600b546001600160a01b031690565b6001600160a01b031660009081526016602052604090205490565b612890613525565b61289982612a07565b6128b55760405162461bcd60e51b81526004016108699061465c565b506000908152600c60209081526040808320815160e081018352815463ffffffff81168252600160201b810460ff908116151595830195909552600160281b8104909416151592810192909252600160301b8304600490810b810b900b6060830152600160581b9092046001600160a01b03166080820152600182015460a0820152600290910154820b820b90910b60c082015290565b60155490565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b612988613525565b606460ff8316106129ab5760405162461bcd60e51b81526004016108699061432a565b60ff82166000908152600d60205260409020546107a890612888565b60006001600160e01b031982166380ac58cd60e01b14806129f857506001600160e01b03198216635b5e139f60e01b145b806107a857506107a882612f5c565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612a5982611b3b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000612a9d82612a07565b612ab95760405162461bcd60e51b8152600401610869906140cb565b6000612ac483611b3b565b9050806001600160a01b0316846001600160a01b03161480612aff5750836001600160a01b0316612af484610842565b6001600160a01b0316145b80612b0f5750612b0f8185612952565b949350505050565b80471015612b375760405162461bcd60e51b815260040161086990614094565b6000826001600160a01b031682604051612b5090613bbc565b60006040518083038185875af1925050503d8060008114612b8d576040519150601f19603f3d011682016040523d82523d6000602084013e612b92565b606091505b50509050806109215760405162461bcd60e51b81526004016108699061403a565b826001600160a01b0316612bc682611b3b565b6001600160a01b031614612bec5760405162461bcd60e51b81526004016108699061442a565b6001600160a01b038216612c125760405162461bcd60e51b815260040161086990613f99565b612c1d838383612f75565b612c28600082612a24565b6001600160a01b0383166000908152600360205260408120805460019290612c519084906149a3565b90915550506001600160a01b0382166000908152600360205260408120805460019290612c7f9084906147fd565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b612cfa828260405180602001604052806000815250612ffe565b5050565b600a54604051630178b8bf60e01b81526000918291600160201b9091046001600160a01b031690630178b8bf90612d39908690600401613d94565b60206040518083038186803b158015612d5157600080fd5b505afa158015612d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d899190613639565b604051631d9dabef60e11b81529091506001600160a01b03821690633b3b57de90612db8908690600401613d94565b60206040518083038186803b158015612dd057600080fd5b505afa158015612de4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e089190613639565b9392505050565b612e1a848484612bb3565b612e2684848484613031565b6122a65760405162461bcd60e51b815260040161086990613e52565b606081612e6757506040805180820190915260018152600360fc1b60208201526107ab565b8160005b8115612e915780612e7b81614a21565b9150612e8a9050600a8361488a565b9150612e6b565b6000816001600160401b03811115612eb957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612ee3576020820181803683370190505b5090505b8415612b0f57612ef86001836149a3565b9150612f05600a86614a80565b612f109060306147fd565b60f81b818381518110612f3357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350612f55600a8661488a565b9450612ee7565b6001600160e01b031981166301ffc9a760e01b14919050565b612f80838383610921565b6001600160a01b038316612f9c57612f978161314c565b612fbf565b816001600160a01b0316836001600160a01b031614612fbf57612fbf8382613190565b6001600160a01b038216612fdb57612fd68161322d565b610921565b826001600160a01b0316826001600160a01b031614610921576109218282613306565b613008838361334a565b6130156000848484613031565b6109215760405162461bcd60e51b815260040161086990613e52565b6000613045846001600160a01b0316613429565b1561314157836001600160a01b031663150b7a0261306161077f565b8786866040518563ffffffff1660e01b81526004016130839493929190613c10565b602060405180830381600087803b15801561309d57600080fd5b505af19250505080156130cd575060408051601f3d908101601f191682019092526130ca9181019061382c565b60015b613127573d8080156130fb576040519150601f19603f3d011682016040523d82523d6000602084013e613100565b606091505b50805161311f5760405162461bcd60e51b815260040161086990613e52565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612b0f565b506001949350505050565b600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6000600161319d84611b70565b6131a791906149a3565b6000838152600760205260409020549091508082146131fa576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061323f906001906149a3565b6000838152600960205260408120546008805493945090928490811061327557634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600883815481106132a457634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806132ea57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061331183611b70565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b0382166133705760405162461bcd60e51b8152600401610869906142f5565b61337981612a07565b156133965760405162461bcd60e51b815260040161086990613ea4565b6133a260008383612f75565b6001600160a01b03821660009081526003602052604081208054600192906133cb9084906147fd565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b3b151590565b82805461343b906149e6565b90600052602060002090601f01602090048101928261345d57600085556134a3565b82601f1061347657805160ff19168380011785556134a3565b828001600101855582156134a3579182015b828111156134a3578251825591602001919060010190613488565b506134af929150613561565b5090565b604080516101208101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e082019290925261010081019190915290565b50805460008255600302906000526020600020908101906135229190613576565b50565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b5b808211156134af5760008155600101613562565b808211156134af5780546001600160a01b0319168155600061359b60018301826135b6565b506002810180546001600160601b0319169055600301613576565b5080546135c2906149e6565b6000825580601f106135d45750613522565b601f0160209004906000526020600020908101906135229190613561565b803560ff811681146107ab57600080fd5b805169ffffffffffffffffffff811681146107ab57600080fd5b60006020828403121561362e578081fd5b8135612e0881614ad6565b60006020828403121561364a578081fd5b8151612e0881614ad6565b60008060408385031215613667578081fd5b823561367281614ad6565b9150602083013561368281614ad6565b809150509250929050565b6000806000606084860312156136a1578081fd5b83356136ac81614ad6565b925060208401356136bc81614ad6565b929592945050506040919091013590565b600080600080608085870312156136e2578081fd5b84356136ed81614ad6565b93506020858101356136fe81614ad6565b93506040860135925060608601356001600160401b0380821115613720578384fd5b818801915088601f830112613733578384fd5b81358181111561374557613745614ac0565b604051601f8201601f191681018501838111828210171561376857613768614ac0565b60405281815283820185018b101561377e578586fd5b81858501868301379081019093019390935250939692955090935050565b600080604083850312156137ae578182fd5b82356137b981614ad6565b9150602083013561368281614aeb565b600080604083850312156137db578182fd5b82356137e681614ad6565b946020939093013593505050565b600060208284031215613805578081fd5b8151612e0881614aeb565b600060208284031215613821578081fd5b8135612e0881614af9565b60006020828403121561383d578081fd5b8151612e0881614af9565b60008060006040848603121561385c578081fd5b83356001600160401b0380821115613872578283fd5b818601915086601f830112613885578283fd5b813581811115613893578384fd5b8760208285010111156138a4578384fd5b6020928301955093506138ba91860190506135f2565b90509250925092565b6000602082840312156138d4578081fd5b5035919050565b6000806000604084860312156138ef578081fd5b8335925060208401356001600160401b038082111561390c578283fd5b818601915086601f83011261391f578283fd5b81358181111561392d578384fd5b8760208083028501011115613940578384fd5b6020830194508093505050509250925092565b600080600060608486031215613967578081fd5b8335925060208401359150604084013580820b8114613984578182fd5b809150509250925092565b600080604083850312156139a1578182fd5b823591506139b1602084016135f2565b90509250929050565b6000602082840312156139cb578081fd5b612e08826135f2565b600080600080600060a086880312156139eb578283fd5b6139f486613603565b9450602086015193506040860151925060608601519150613a1760808701613603565b90509295509295909350565b6001600160a01b03169052565b15159052565b60008151808452613a4e8160208601602086016149ba565b601f01601f19169290920160200192915050565b60040b9052565b60000b9052565b805463ffffffff8116835260ff8160201c1615156020840152613a9c6040840160ff8360281c16613a30565b613aaf606084018260301c60040b613a62565b613ac960808401605883901c6001600160a01b0316613a23565b50600181015460a0830152600281015460000b61092160c0840182613a69565b60006101208251845263ffffffff60208401511660208501526040830151613b146040860182613a30565b506060830151613b276060860182613a30565b506080830151613b3a6080860182613a62565b5060a0830151613b4d60a0860182613a23565b5060c083015160c085015260e0830151613b6a60e0860182613a69565b50610100808401518282870152613b8383870182613a36565b9695505050505050565b60008351613b9f8184602088016149ba565b835190830190613bb38183602088016149ba565b01949350505050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613b8390830184613a36565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015613c9657603f19888603018452613c84858351613ae9565b94509285019290850190600101613c68565b5092979650505050505050565b60208082528251828201819052600091906040908185019080840286018301878501865b83811015613d3457888303603f19018552815180516001600160a01b0316845287810151608089860181905290613d0082870182613a36565b838a01516001600160581b0316878b015260609384015160ff16939096019290925250509386019390860190600101613cc7565b509098975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015613d7d57835160ff1683529284019291840191600101613d5e565b50909695505050505050565b901515815260200190565b90815260200190565b6020810160028310613dbf57634e487b7160e01b600052602160045260246000fd5b91905290565b600060208252612e086020830184613a36565b6020808252601590820152746e6f742079657420746f20737461727420766f746560581b604082015260600190565b6020808252602b908201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560408201526a74206f6620626f756e647360a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b6020808252600d908201526c185b1c9958591e481d9bdd1959609a1b604082015260600190565b6020808252600f908201526e1a9d5b99db195c881d1bdbc81bdb19608a1b604082015260600190565b6020808252600e908201526d39b437bab6321031329037b832b760911b604082015260600190565b60208082526026908201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060408201526573686172657360d01b606082015260800190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604082015260600190565b60208082526010908201526f0d2dcecc2d8d2c840dcc2dacad0c2e6d60831b604082015260600190565b6020808252603a908201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726040820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b606082015260800190565b6020808252601d908201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252602b908201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060408201526a191d59481c185e5b595b9d60aa1b606082015260800190565b6020808252600f908201526e0c2d8e4cac2c8f240dedc40c4eae6d608b1b604082015260600190565b6020808252600c908201526b30b63932b0b23c9037b832b760a11b604082015260600190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776040820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b606082015260800190565b602080825260129082015271696e646578206f7574206f662072616e676560701b604082015260600190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252601390820152726e6f742079657420746f20656e6420766f746560681b604082015260600190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252600f908201526e1a5b9d985b1a5908189d5cda081251608a1b604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526017908201527661747461636b65722063616e2774206f76657274616b6560481b604082015260600190565b60208082526010908201526f33b2b732b930ba34b7b71032b93937b960811b604082015260600190565b6020808252601690820152756e6f7420696e2070726f706f73696e6720737461676560501b604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252601390820152726e6f2070726f706f73616c20746f20766f746560681b604082015260600190565b6020808252601d908201527f717565727920666f72206e6f6e6578697374616e74206a756e676c6572000000604082015260600190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b6020808252601190820152703737ba1037baba1037b31036b0b933b4b760791b604082015260600190565b6020808252601390820152726e6f7420696e20766f74696e6720737461676560681b604082015260600190565b6020808252600e908201526d1b9bdd08195b9bdd59da08189a5960921b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602c908201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60408201526b7574206f6620626f756e647360a01b606082015260800190565b6020808252600d908201526c37baba1037b31036b0b933b4b760991b604082015260600190565b6020808252601d908201527f717565727920666f72206e6f6e6578697374656e74206a756e676c6572000000604082015260600190565b6020808252600e908201526d185b1c9958591e4818db1bdcd95960921b604082015260600190565b6020808252600990820152683737ba1037bbb732b960b91b604082015260600190565b815163ffffffff16815260208083015115159082015260408083015115159082015260608083015160040b908201526080808301516001600160a01b03169082015260a0808301519082015260c09182015160000b9181019190915260e00190565b60e081016110fc8284613a70565b600060208252612e086020830184613ae9565b63ffffffff91909116815260200190565b600080821280156001600160ff1b038490038513161561479457614794614a94565b600160ff1b83900384128116156147ad576147ad614a94565b50500190565b60008160040b8360040b82821282647fffffffff038213811516156147da576147da614a94565b82647fffffffff190382128116156147f4576147f4614a94565b50019392505050565b6000821982111561481057614810614a94565b500190565b600060ff821660ff84168060ff0382111561483257614832614a94565b019392505050565b60006001600160581b03828116848216808303821115613bb357613bb3614a94565b60008261486b5761486b614aaa565b600160ff1b82146000198414161561488557614885614a94565b500590565b60008261489957614899614aaa565b500490565b600064ffffffffff808416806148b6576148b6614aaa565b92169190910492915050565b60006001600160ff1b03818413828413808216868404861116156148e8576148e8614a94565b600160ff1b8487128281168783058912161561490657614906614a94565b85871292508782058712848416161561492157614921614a94565b8785058712818416161561493757614937614a94565b505050929093029392505050565b600081600019048311821515161561495f5761495f614a94565b500290565b60008083128015600160ff1b85018412161561498257614982614a94565b6001600160ff1b038401831381161561499d5761499d614a94565b50500390565b6000828210156149b5576149b5614a94565b500390565b60005b838110156149d55781810151838201526020016149bd565b838111156122a65750506000910152565b6002810460018216806149fa57607f821691505b60208210811415614a1b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415614a3557614a35614a94565b5060010190565b600063ffffffff80831681811415614a5657614a56614a94565b6001019392505050565b600060ff821660ff811415614a7757614a77614a94565b60010192915050565b600082614a8f57614a8f614aaa565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461352257600080fd5b801515811461352257600080fd5b6001600160e01b03198116811461352257600080fdfefa534782d33171b4fd6bad477513fbf21d9c8d47c60cd6cb4dd49ba52a6b5cb6a2646970667358221220cceec9c78e4e6abb306aab8a4e6b46f093a004578eef84184b61a188be2b012d64736f6c6343000800003360806040523480156200001157600080fd5b5060405162000d0a38038062000d0a83398101604081905262000034916200027b565b6040518060400160405280600e81526020016d4a756e676c655265736f7572636560901b815250604051806040016040528060038152602001622523a960e91b81525081600390805190602001906200008f929190620001d5565b508051620000a5906004906020840190620001d5565b505050620000cd620000bc620000ea60201b60201c565b6969e10de76676d0800000620000ee565b620000e3816969e10de76676d0800000620000ee565b506200034d565b3390565b6001600160a01b038216620001205760405162461bcd60e51b81526004016200011790620002ab565b60405180910390fd5b6200012e60008383620001d0565b8060026000828254620001429190620002eb565b90915550506001600160a01b0382166000908152602081905260408120805483929062000171908490620002eb565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90620001b6908590620002e2565b60405180910390a3620001cc60008383620001d0565b5050565b505050565b828054620001e39062000310565b90600052602060002090601f01602090048101928262000207576000855562000252565b82601f106200022257805160ff191683800117855562000252565b8280016001018555821562000252579182015b828111156200025257825182559160200191906001019062000235565b506200026092915062000264565b5090565b5b8082111562000260576000815560010162000265565b6000602082840312156200028d578081fd5b81516001600160a01b0381168114620002a4578182fd5b9392505050565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b600082198211156200030b57634e487b7160e01b81526011600452602481fd5b500190565b6002810460018216806200032557607f821691505b602082108114156200034757634e487b7160e01b600052602260045260246000fd5b50919050565b6109ad806200035d6000396000f3fe608060405234801561001057600080fd5b50600436106100995760003560e01c806306fdde031461009e578063095ea7b3146100bc57806318160ddd146100dc57806323b872dd146100f1578063313ce56714610104578063395093511461011957806370a082311461012c57806395d89b411461013f578063a457c2d714610147578063a9059cbb1461015a578063dd62ed3e1461016d575b600080fd5b6100a6610180565b6040516100b391906106cd565b60405180910390f35b6100cf6100ca366004610699565b610212565b6040516100b391906106c2565b6100e461022f565b6040516100b39190610901565b6100cf6100ff36600461065e565b610235565b61010c6102ce565b6040516100b3919061090a565b6100cf610127366004610699565b6102d3565b6100e461013a36600461060b565b610327565b6100a6610346565b6100cf610155366004610699565b610355565b6100cf610168366004610699565b6103ce565b6100e461017b36600461062c565b6103e2565b60606003805461018f9061093c565b80601f01602080910402602001604051908101604052809291908181526020018280546101bb9061093c565b80156102085780601f106101dd57610100808354040283529160200191610208565b820191906000526020600020905b8154815290600101906020018083116101eb57829003601f168201915b5050505050905090565b600061022661021f61040d565b8484610411565b50600192915050565b60025490565b60006102428484846104c5565b6001600160a01b03841660009081526001602052604081208161026361040d565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050828110156102af5760405162461bcd60e51b81526004016102a6906107eb565b60405180910390fd5b6102c3856102bb61040d565b858403610411565b506001949350505050565b601290565b60006102266102e061040d565b8484600160006102ee61040d565b6001600160a01b03908116825260208083019390935260409182016000908120918b16815292529020546103229190610918565b610411565b6001600160a01b0381166000908152602081905260409020545b919050565b60606004805461018f9061093c565b6000806001600061036461040d565b6001600160a01b03908116825260208083019390935260409182016000908120918816815292529020549050828110156103b05760405162461bcd60e51b81526004016102a6906108bc565b6103c46103bb61040d565b85858403610411565b5060019392505050565b60006102266103db61040d565b84846104c5565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b0383166104375760405162461bcd60e51b81526004016102a690610878565b6001600160a01b03821661045d5760405162461bcd60e51b81526004016102a690610763565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906104b8908590610901565b60405180910390a3505050565b6001600160a01b0383166104eb5760405162461bcd60e51b81526004016102a690610833565b6001600160a01b0382166105115760405162461bcd60e51b81526004016102a690610720565b61051c8383836105ef565b6001600160a01b038316600090815260208190526040902054818110156105555760405162461bcd60e51b81526004016102a6906107a5565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061058c908490610918565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516105d69190610901565b60405180910390a36105e98484846105ef565b50505050565b505050565b80356001600160a01b038116811461034157600080fd5b60006020828403121561061c578081fd5b610625826105f4565b9392505050565b6000806040838503121561063e578081fd5b610647836105f4565b9150610655602084016105f4565b90509250929050565b600080600060608486031215610672578081fd5b61067b846105f4565b9250610689602085016105f4565b9150604084013590509250925092565b600080604083850312156106ab578182fd5b6106b4836105f4565b946020939093013593505050565b901515815260200190565b6000602080835283518082850152825b818110156106f9578581018301518582016040015282016106dd565b8181111561070a5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604082015265616c616e636560d01b606082015260800190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616040820152676c6c6f77616e636560c01b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604082015264207a65726f60d81b606082015260800190565b90815260200190565b60ff91909116815260200190565b6000821982111561093757634e487b7160e01b81526011600452602481fd5b500190565b60028104600182168061095057607f821691505b6020821081141561097157634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220f17db4d0512a267d750e98075e3946a377dbb7dcc6291c840ade766c8b2c852f64736f6c63430008000033",
  "deployedBytecode": "0x60806040526004361061020a5760003560e01c80636352211e11610119578063b88d4fde116100a6578063b88d4fde1461062f578063b92239461461064f578063c040e6b814610664578063c87b56dd14610686578063cceb68f5146106a6578063cd355bff146106c8578063ce7c2ac2146106dd578063e2c73cb7146106fd578063e33b7de31461072a578063e985e9c51461073f578063fa4c20871461075f57610251565b80636352211e146104e057806370a08231146105005780637efad966146105205780638b83209b1461054057806395d89b41146105605780639852595c14610575578063a22cb46514610595578063a706bb10146105b5578063aac27d23146105e2578063ac1ac96b1461060f57610251565b80632570eb7d116101975780632570eb7d146103c15780632f745c59146103e1578063313dc99a14610401578063363dd19e146104145780633a98ef391461042957806342842e0e1461043e5780634c0a6af01461045e5780634f6ccce71461047357806352ef8a7f146104935780635c8a0676146104c057610251565b806301ffc9a71461025657806306fdde031461028c578063081812fc146102ae578063095ea7b3146102db5780630aebeb4e146102fd5780631300cc381461031d578063172195221461033d57806318160ddd1461035f578063191655871461038157806323b872dd146103a157610251565b36610251577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be77061023861077f565b34604051610247929190613bd3565b60405180910390a1005b600080fd5b34801561026257600080fd5b50610276610271366004613810565b610783565b6040516102839190613d89565b60405180910390f35b34801561029857600080fd5b506102a16107b0565b6040516102839190613dc5565b3480156102ba57600080fd5b506102ce6102c93660046138c3565b610842565b6040516102839190613bbf565b3480156102e757600080fd5b506102fb6102f63660046137c9565b61088e565b005b34801561030957600080fd5b506102fb6103183660046138c3565b610926565b34801561032957600080fd5b506102fb6103383660046138db565b610b22565b34801561034957600080fd5b50610352610d41565b6040516102839190614761565b34801561036b57600080fd5b50610374610d4d565b6040516102839190613d94565b34801561038d57600080fd5b506102fb61039c36600461361d565b610d53565b3480156103ad57600080fd5b506102fb6103bc36600461368d565b610e98565b3480156103cd57600080fd5b506102fb6103dc3660046138c3565b610ed0565b3480156103ed57600080fd5b506103746103fc3660046137c9565b6110ad565b6102fb61040f366004613848565b611102565b34801561042057600080fd5b506102fb6114d5565b34801561043557600080fd5b506103746116bd565b34801561044a57600080fd5b506102fb61045936600461368d565b6116c3565b34801561046a57600080fd5b506102fb6116de565b34801561047f57600080fd5b5061037461048e3660046138c3565b611784565b34801561049f57600080fd5b506104b36104ae3660046138c3565b6117df565b604051610283919061474e565b3480156104cc57600080fd5b506102fb6104db366004613953565b611980565b3480156104ec57600080fd5b506102ce6104fb3660046138c3565b611b3b565b34801561050c57600080fd5b5061037461051b36600461361d565b611b70565b34801561052c57600080fd5b506104b361053b3660046139ba565b611bb4565b34801561054c57600080fd5b506102ce61055b3660046138c3565b611bfb565b34801561056c57600080fd5b506102a1611c39565b34801561058157600080fd5b5061037461059036600461361d565b611c48565b3480156105a157600080fd5b506102fb6105b036600461379c565b611c63565b3480156105c157600080fd5b506105d56105d036600461361d565b611d31565b6040516102839190613c43565b3480156105ee57600080fd5b506106026105fd36600461361d565b611e09565b6040516102839190613d42565b34801561061b57600080fd5b506102fb61062a36600461398f565b611fe5565b34801561063b57600080fd5b506102fb61064a3660046136cd565b61226d565b34801561065b57600080fd5b506102fb6122ac565b34801561067057600080fd5b506106796125fc565b6040516102839190613d9d565b34801561069257600080fd5b506102a16106a13660046138c3565b612605565b3480156106b257600080fd5b506106bb612729565b6040516102839190613ca3565b3480156106d457600080fd5b506102ce61285e565b3480156106e957600080fd5b506103746106f836600461361d565b61286d565b34801561070957600080fd5b5061071d6107183660046138c3565b612888565b60405161028391906146de565b34801561073657600080fd5b5061037461294c565b34801561074b57600080fd5b5061027661075a366004613655565b612952565b34801561076b57600080fd5b5061071d61077a3660046139ba565b612980565b3390565b60006001600160e01b0319821663780e9d6360e01b14806107a857506107a8826129c7565b90505b919050565b6060600080546107bf906149e6565b80601f01602080910402602001604051908101604052809291908181526020018280546107eb906149e6565b80156108385780601f1061080d57610100808354040283529160200191610838565b820191906000526020600020905b81548152906001019060200180831161081b57829003601f168201915b5050505050905090565b600061084d82612a07565b6108725760405162461bcd60e51b815260040161086990614353565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061089982611b3b565b9050806001600160a01b0316836001600160a01b031614156108cd5760405162461bcd60e51b8152600401610869906144d7565b806001600160a01b03166108df61077f565b6001600160a01b031614806108fb57506108fb8161075a61077f565b6109175760405162461bcd60e51b8152600401610869906141b1565b6109218383612a24565b505050565b806109313382612a92565b61094d5760405162461bcd60e51b8152600401610869906146bb565b6000828152600c602052604090208054600160201b900460ff166109835760405162461bcd60e51b815260040161086990614693565b600081600001600b9054906101000a90046001600160a01b031690506000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109da57600080fd5b505afa1580156109ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1291906139d4565b5050855460ff60201b19168655506001850154909250610a349150600a6148c2565b835460028501546001860154600160301b909204600490810b900b91600091820b90910b90610a639085614964565b610a6d91906148c2565b610a7791906148c2565b610a81919061485c565b83548490600690610a9d908490600160301b900460040b6147b3565b92506101000a81548164ffffffffff021916908360040b64ffffffffff16021790555060008360000160069054906101000a900460040b60040b1215610af55760405162461bcd60e51b815260040161086990614635565b84600080516020614b1083398151915284604051610b139190614740565b60405180910390a25050505050565b60128054829160009186908110610b4957634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201905060005b8260ff168160ff161015610c395760ff81166000908152600d6020526040902054610b8561077f565b6001600160a01b0316610b9782611b3b565b6001600160a01b031614610bbd5760405162461bcd60e51b8152600401610869906146bb565b600a5460ff83166000908152600f602052604090205463ffffffff918216911610610bfa5760405162461bcd60e51b815260040161086990613edb565b50600a5460ff82166000908152600f60205260409020805463ffffffff191663ffffffff90921691909117905580610c3181614a60565b915050610b5c565b508181600201600b8282829054906101000a900460ff16610c5a9190614815565b825460ff9182166101009390930a928302919092021990911617905550600b546001600160a01b031663a9059cbb610c9061077f565b6064600a60ff8716610ca130611b70565b610cab9190614945565b610cb6906008614945565b610cc0919061488a565b610cca919061488a565b6040518363ffffffff1660e01b8152600401610ce7929190613bd3565b602060405180830381600087803b158015610d0157600080fd5b505af1158015610d15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3991906137f4565b505050505050565b600a5463ffffffff1681565b60085490565b6001600160a01b038116600090815260166020526040902054610d885760405162461bcd60e51b815260040161086990613f53565b600060155447610d9891906147fd565b6001600160a01b0383166000908152601760209081526040808320546014546016909352908320549394509192610dcf9085614945565b610dd9919061488a565b610de391906149a3565b905080610e025760405162461bcd60e51b815260040161086990614117565b6001600160a01b038316600090815260176020526040902054610e269082906147fd565b6001600160a01b038416600090815260176020526040902055601554610e4d9082906147fd565b601555610e5a8382612b17565b7fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b0568382604051610e8b929190613bd3565b60405180910390a1505050565b610ea9610ea361077f565b82612a92565b610ec55760405162461bcd60e51b815260040161086990614598565b610921838383612bb3565b6000818152600c602052604090208054600160201b900460ff16610f065760405162461bcd60e51b815260040161086990613f2b565b600081600001600b9054906101000a90046001600160a01b031690506000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610f5d57600080fd5b505afa158015610f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9591906139d4565b50505091505060008360010154600a610fae91906148c2565b845460028601546001870154600160301b909204600490810b900b91600091820b90910b90610fdd9086614964565b610fe791906148c2565b610ff191906148c2565b610ffb919061485c565b84546110159190600160301b9004600490810b900b614772565b9050600081126110375760405162461bcd60e51b815260040161086990614518565b835464ffffffffff60301b191684556040518590600080516020614b1083398151915290611066908790614740565b60405180910390a2600b546001600160a01b031663a9059cbb61108761077f565b67016345785d8a00006040518363ffffffff1660e01b8152600401610ce7929190613bd3565b60006110b883611b70565b82106110d65760405162461bcd60e51b815260040161086990613e07565b506001600160a01b03821660009081526006602090815260408083208484529091529020545b92915050565b601254600a1115611220576012604051806080016040528061112261077f565b6001600160a01b0316815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505050346001600160581b0316602080840191909152604090920181905283546001808201865594825290829020835160039092020180546001600160a01b0319166001600160a01b03909216919091178155828201518051939491936111d49392850192919091019061342f565b5060408201516002909101805460609093015160ff16600160581b0260ff60581b196001600160581b039093166001600160581b03199094169390931791909116919091179055610921565b600a60ff8216106112435760405162461bcd60e51b815260040161086990614209565b600060128260ff168154811061126957634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516080810190915260039092020180546001600160a01b0316825260018101805492939192918401916112a9906149e6565b80601f01602080910402602001604051908101604052809291908181526020018280546112d5906149e6565b80156113225780601f106112f757610100808354040283529160200191611322565b820191906000526020600020905b81548152906001019060200180831161130557829003601f168201915b5050509183525050600291909101546001600160581b0381166020830152600160581b900460ff1660409182015281015190915061136790662386f26fc1000061483a565b6001600160581b031634101561138f5760405162461bcd60e51b815260040161086990614570565b6113aa816000015182604001516001600160581b0316612b17565b60405180608001604052806113bd61077f565b6001600160a01b0316815260200185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506001600160581b03341660208301526040909101526012805460ff851690811061143d57634e487b7160e01b600052603260045260246000fd5b600091825260209182902083516003929092020180546001600160a01b0319166001600160a01b0390921691909117815582820151805191926114889260018501929091019061342f565b5060408201516002909101805460609093015160ff16600160581b0260ff60581b196001600160581b039093166001600160581b0319909416939093179190911691909117905550505050565b600b546001600160a01b03166323b872dd6114ee61077f565b30670de0b6b3a76400006040518463ffffffff1660e01b815260040161151693929190613bec565b602060405180830381600087803b15801561153057600080fd5b505af1158015611544573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156891906137f4565b506000611573610d4d565b61157e9060016147fd565b905061159161158b61077f565b82612ce0565b6040805160e081018252600a5463ffffffff908116825260006020808401828152848601838152620f4240606087019081526080870185815260a0880186815260c089018781528b8852600c9096528987209851895495519451935192516001600160a01b0316600160581b02600160581b600160f81b031960049490940b64ffffffffff16600160301b0264ffffffffff60301b19951515600160281b0260ff60281b19971515600160201b0260ff60201b1994909c1663ffffffff1990991698909817929092169990991794909416949094179190911691909117169390931784559151600184015590516002830180549190920b60ff1660ff1990911617905590518291600080516020614b10833981519152916116b29190614740565b60405180910390a250565b60145490565b6109218383836040518060200160405280600081525061226d565b600060105460ff16600181111561170557634e487b7160e01b600052602160045260246000fd5b146117225760405162461bcd60e51b8152600401610869906143fa565b6220f58060115461173391906147fd565b4210156117525760405162461bcd60e51b815260040161086990613dd8565b6012546117715760405162461bcd60e51b815260040161086990614473565b6010805460ff1916600117905542601155565b600061178e610d4d565b82106117ac5760405162461bcd60e51b8152600401610869906145e9565b600882815481106117cd57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6117e76134b3565b6117f082612a07565b61180c5760405162461bcd60e51b8152600401610869906144a0565b6000600c60008481526020019081526020016000206040518060e00160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900460ff161515151581526020016000820160059054906101000a900460ff161515151581526020016000820160069054906101000a900460040b60040b60040b815260200160008201600b9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182015481526020016002820160009054906101000a900460000b60000b60000b815250509050604051806101200160405280848152602001826000015163ffffffff168152602001826020015115158152602001826040015115158152602001826060015160040b815260200182608001516001600160a01b031681526020018260a0015181526020018260c0015160000b815260200161197785612605565b90529392505050565b8261198b3382612a92565b6119a75760405162461bcd60e51b8152600401610869906146bb565b6000848152600c60205260409020600a54815463ffffffff9081169116146119e15760405162461bcd60e51b8152600401610869906143d0565b8054600160201b900460ff1615611a0a5760405162461bcd60e51b81526004016108699061418b565b6000611a1585612cfe565b90506001600160a01b038116611a3d5760405162461bcd60e51b815260040161086990614010565b60008190506000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611a7d57600080fd5b505afa158015611a91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab591906139d4565b50508654600160201b60ff60201b1990911617600160581b600160f81b031916600160581b6001600160a01b03881602178755506001860181905560028601805460ff191660ff60008b900b16179055604051909250899150600080516020614b1083398151915290611b29908790614740565b60405180910390a25050505050505050565b6000818152600260205260408120546001600160a01b0316806107a85760405162461bcd60e51b81526004016108699061427f565b60006001600160a01b038216611b985760405162461bcd60e51b815260040161086990614235565b506001600160a01b031660009081526003602052604090205490565b611bbc6134b3565b606460ff831610611bdf5760405162461bcd60e51b81526004016108699061432a565b60ff82166000908152600d60205260409020546107a8906117df565b600060188281548110611c1e57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031692915050565b6060600180546107bf906149e6565b6001600160a01b031660009081526017602052604090205490565b611c6b61077f565b6001600160a01b0316826001600160a01b03161415611c9c5760405162461bcd60e51b815260040161086990613fdd565b8060056000611ca961077f565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155611ced61077f565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611d259190613d89565b60405180910390a35050565b60606000611d3e83611b70565b9050806001600160401b03811115611d6657634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611d9f57816020015b611d8c6134b3565b815260200190600190039081611d845790505b5091506000805b82811015611e0157611db885826110ad565b9150611dc3826117df565b848281518110611de357634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080611df990614a21565b915050611da6565b505050919050565b6060600080805b606460ff82161015611eae5760ff81166000908152600d60205260409020549150611e3a82612a07565b8015611e5f5750846001600160a01b0316611e5483611b3b565b6001600160a01b0316145b8015611e895750600a5460ff82166000908152600f602052604090205463ffffffff908116911614155b15611e9c5782611e9881614a60565b9350505b80611ea681614a60565b915050611e10565b508160ff166001600160401b03811115611ed857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611f01578160200160208202803683370190505b5092506000805b606460ff82161015611fdc5760ff81166000908152600d60205260409020549250611f3283612a07565b8015611f575750856001600160a01b0316611f4c84611b3b565b6001600160a01b0316145b8015611f815750600a5460ff82166000908152600f602052604090205463ffffffff908116911614155b15611fca5780858360ff1681518110611faa57634e487b7160e01b600052603260045260246000fd5b60ff9092166020928302919091019091015281611fc681614a60565b9250505b80611fd481614a60565b915050611f08565b50505050919050565b81611ff03382612a92565b61200c5760405162461bcd60e51b8152600401610869906146bb565b600060105460ff16600181111561203357634e487b7160e01b600052602160045260246000fd5b146120505760405162461bcd60e51b8152600401610869906143fa565b606460ff8316106120735760405162461bcd60e51b81526004016108699061432a565b6000838152600c602052604090208054600160281b900460ff16156120aa5760405162461bcd60e51b815260040161086990614162565b60ff83166000908152600d6020908152604080832054808452600c909252909120600a54835463ffffffff9081169116146120f75760405162461bcd60e51b815260040161086990613f02565b8054600160201b900460ff1615801561211c5750600a54815463ffffffff9081169116145b1561215a5780548354600160301b91829004600490810b810b92909104810b900b1361215a5760405162461bcd60e51b81526004016108699061439f565b805460ff60281b199081168255835416600160281b17835560ff85166000908152600d602052604090208690558115610d395760ff85166000908152600e6020526040812054645d21dba000906121b190426149a3565b6121bb9190614945565b905060006121c830611b70565b9050808211156121d6578091505b600b546001600160a01b03166323b872dd306121f187611b3b565b856040518463ffffffff1660e01b815260040161221093929190613bec565b602060405180830381600087803b15801561222a57600080fd5b505af115801561223e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226291906137f4565b505050505050505050565b61227e61227861077f565b83612a92565b61229a5760405162461bcd60e51b815260040161086990614598565b6122a684848484612e0f565b50505050565b600160105460ff1660018111156122d357634e487b7160e01b600052602160045260246000fd5b146122f05760405162461bcd60e51b815260040161086990614543565b6203f48060115461230191906147fd565b4210156123205760405162461bcd60e51b8152600401610869906142c8565b6010805460ff1916905542601155600080805b60125460ff821610156123e7578260ff1660128260ff168154811061236857634e487b7160e01b600052603260045260246000fd5b6000918252602090912060039091020160020154600160581b900460ff1611156123d55760128160ff16815481106123b057634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201600201600b9054906101000a900460ff1692508091505b806123df81614a60565b915050612333565b50600060128260ff168154811061240e57634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516080810190915260039092020180546001600160a01b03168252600181018054929391929184019161244e906149e6565b80601f016020809104026020016040519081016040528092919081815260200182805461247a906149e6565b80156124c75780601f1061249c576101008083540402835291602001916124c7565b820191906000526020600020905b8154815290600101906020018083116124aa57829003601f168201915b5050509183525050600291909101546001600160581b0381166020830152600160581b900460ff16604090910152600b5481519192506001600160a01b03169063a9059cbb90600a61251830611b70565b612522919061488a565b6040518363ffffffff1660e01b815260040161253f929190613bd3565b602060405180830381600087803b15801561255957600080fd5b505af115801561256d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259191906137f4565b5061259e60126000613501565b600a805463ffffffff169060006125b483614a3c565b82546101009290920a63ffffffff818102199093169183160217909155602083810151600a549092166000908152601382526040902082516122a6945090929091019061342f565b60105460ff1681565b6000818152600c602052604081205460609163ffffffff821691612636906103e890600160301b900460040b61489e565b9050611c4b64ffffffffff8216111561264e5750611c4b5b63ffffffff82166000908152601360205260408120805461266e906149e6565b80601f016020809104026020016040519081016040528092919081815260200182805461269a906149e6565b80156126e75780601f106126bc576101008083540402835291602001916126e7565b820191906000526020600020905b8154815290600101906020018083116126ca57829003601f168201915b50505050509050806126ff8364ffffffffff16612e42565b604051602001612710929190613b8d565b6040516020818303038152906040529350505050919050565b60606012805480602002602001604051908101604052809291908181526020016000905b8282101561285557600084815260209081902060408051608081019091526003850290910180546001600160a01b031682526001810180549293919291840191612796906149e6565b80601f01602080910402602001604051908101604052809291908181526020018280546127c2906149e6565b801561280f5780601f106127e45761010080835404028352916020019161280f565b820191906000526020600020905b8154815290600101906020018083116127f257829003601f168201915b5050509183525050600291909101546001600160581b038116602080840191909152600160581b90910460ff16604090920191909152908252600192909201910161274d565b50505050905090565b600b546001600160a01b031690565b6001600160a01b031660009081526016602052604090205490565b612890613525565b61289982612a07565b6128b55760405162461bcd60e51b81526004016108699061465c565b506000908152600c60209081526040808320815160e081018352815463ffffffff81168252600160201b810460ff908116151595830195909552600160281b8104909416151592810192909252600160301b8304600490810b810b900b6060830152600160581b9092046001600160a01b03166080820152600182015460a0820152600290910154820b820b90910b60c082015290565b60155490565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b612988613525565b606460ff8316106129ab5760405162461bcd60e51b81526004016108699061432a565b60ff82166000908152600d60205260409020546107a890612888565b60006001600160e01b031982166380ac58cd60e01b14806129f857506001600160e01b03198216635b5e139f60e01b145b806107a857506107a882612f5c565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612a5982611b3b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000612a9d82612a07565b612ab95760405162461bcd60e51b8152600401610869906140cb565b6000612ac483611b3b565b9050806001600160a01b0316846001600160a01b03161480612aff5750836001600160a01b0316612af484610842565b6001600160a01b0316145b80612b0f5750612b0f8185612952565b949350505050565b80471015612b375760405162461bcd60e51b815260040161086990614094565b6000826001600160a01b031682604051612b5090613bbc565b60006040518083038185875af1925050503d8060008114612b8d576040519150601f19603f3d011682016040523d82523d6000602084013e612b92565b606091505b50509050806109215760405162461bcd60e51b81526004016108699061403a565b826001600160a01b0316612bc682611b3b565b6001600160a01b031614612bec5760405162461bcd60e51b81526004016108699061442a565b6001600160a01b038216612c125760405162461bcd60e51b815260040161086990613f99565b612c1d838383612f75565b612c28600082612a24565b6001600160a01b0383166000908152600360205260408120805460019290612c519084906149a3565b90915550506001600160a01b0382166000908152600360205260408120805460019290612c7f9084906147fd565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b612cfa828260405180602001604052806000815250612ffe565b5050565b600a54604051630178b8bf60e01b81526000918291600160201b9091046001600160a01b031690630178b8bf90612d39908690600401613d94565b60206040518083038186803b158015612d5157600080fd5b505afa158015612d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d899190613639565b604051631d9dabef60e11b81529091506001600160a01b03821690633b3b57de90612db8908690600401613d94565b60206040518083038186803b158015612dd057600080fd5b505afa158015612de4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e089190613639565b9392505050565b612e1a848484612bb3565b612e2684848484613031565b6122a65760405162461bcd60e51b815260040161086990613e52565b606081612e6757506040805180820190915260018152600360fc1b60208201526107ab565b8160005b8115612e915780612e7b81614a21565b9150612e8a9050600a8361488a565b9150612e6b565b6000816001600160401b03811115612eb957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612ee3576020820181803683370190505b5090505b8415612b0f57612ef86001836149a3565b9150612f05600a86614a80565b612f109060306147fd565b60f81b818381518110612f3357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350612f55600a8661488a565b9450612ee7565b6001600160e01b031981166301ffc9a760e01b14919050565b612f80838383610921565b6001600160a01b038316612f9c57612f978161314c565b612fbf565b816001600160a01b0316836001600160a01b031614612fbf57612fbf8382613190565b6001600160a01b038216612fdb57612fd68161322d565b610921565b826001600160a01b0316826001600160a01b031614610921576109218282613306565b613008838361334a565b6130156000848484613031565b6109215760405162461bcd60e51b815260040161086990613e52565b6000613045846001600160a01b0316613429565b1561314157836001600160a01b031663150b7a0261306161077f565b8786866040518563ffffffff1660e01b81526004016130839493929190613c10565b602060405180830381600087803b15801561309d57600080fd5b505af19250505080156130cd575060408051601f3d908101601f191682019092526130ca9181019061382c565b60015b613127573d8080156130fb576040519150601f19603f3d011682016040523d82523d6000602084013e613100565b606091505b50805161311f5760405162461bcd60e51b815260040161086990613e52565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612b0f565b506001949350505050565b600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6000600161319d84611b70565b6131a791906149a3565b6000838152600760205260409020549091508082146131fa576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061323f906001906149a3565b6000838152600960205260408120546008805493945090928490811061327557634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600883815481106132a457634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806132ea57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061331183611b70565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b0382166133705760405162461bcd60e51b8152600401610869906142f5565b61337981612a07565b156133965760405162461bcd60e51b815260040161086990613ea4565b6133a260008383612f75565b6001600160a01b03821660009081526003602052604081208054600192906133cb9084906147fd565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b3b151590565b82805461343b906149e6565b90600052602060002090601f01602090048101928261345d57600085556134a3565b82601f1061347657805160ff19168380011785556134a3565b828001600101855582156134a3579182015b828111156134a3578251825591602001919060010190613488565b506134af929150613561565b5090565b604080516101208101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e082019290925261010081019190915290565b50805460008255600302906000526020600020908101906135229190613576565b50565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b5b808211156134af5760008155600101613562565b808211156134af5780546001600160a01b0319168155600061359b60018301826135b6565b506002810180546001600160601b0319169055600301613576565b5080546135c2906149e6565b6000825580601f106135d45750613522565b601f0160209004906000526020600020908101906135229190613561565b803560ff811681146107ab57600080fd5b805169ffffffffffffffffffff811681146107ab57600080fd5b60006020828403121561362e578081fd5b8135612e0881614ad6565b60006020828403121561364a578081fd5b8151612e0881614ad6565b60008060408385031215613667578081fd5b823561367281614ad6565b9150602083013561368281614ad6565b809150509250929050565b6000806000606084860312156136a1578081fd5b83356136ac81614ad6565b925060208401356136bc81614ad6565b929592945050506040919091013590565b600080600080608085870312156136e2578081fd5b84356136ed81614ad6565b93506020858101356136fe81614ad6565b93506040860135925060608601356001600160401b0380821115613720578384fd5b818801915088601f830112613733578384fd5b81358181111561374557613745614ac0565b604051601f8201601f191681018501838111828210171561376857613768614ac0565b60405281815283820185018b101561377e578586fd5b81858501868301379081019093019390935250939692955090935050565b600080604083850312156137ae578182fd5b82356137b981614ad6565b9150602083013561368281614aeb565b600080604083850312156137db578182fd5b82356137e681614ad6565b946020939093013593505050565b600060208284031215613805578081fd5b8151612e0881614aeb565b600060208284031215613821578081fd5b8135612e0881614af9565b60006020828403121561383d578081fd5b8151612e0881614af9565b60008060006040848603121561385c578081fd5b83356001600160401b0380821115613872578283fd5b818601915086601f830112613885578283fd5b813581811115613893578384fd5b8760208285010111156138a4578384fd5b6020928301955093506138ba91860190506135f2565b90509250925092565b6000602082840312156138d4578081fd5b5035919050565b6000806000604084860312156138ef578081fd5b8335925060208401356001600160401b038082111561390c578283fd5b818601915086601f83011261391f578283fd5b81358181111561392d578384fd5b8760208083028501011115613940578384fd5b6020830194508093505050509250925092565b600080600060608486031215613967578081fd5b8335925060208401359150604084013580820b8114613984578182fd5b809150509250925092565b600080604083850312156139a1578182fd5b823591506139b1602084016135f2565b90509250929050565b6000602082840312156139cb578081fd5b612e08826135f2565b600080600080600060a086880312156139eb578283fd5b6139f486613603565b9450602086015193506040860151925060608601519150613a1760808701613603565b90509295509295909350565b6001600160a01b03169052565b15159052565b60008151808452613a4e8160208601602086016149ba565b601f01601f19169290920160200192915050565b60040b9052565b60000b9052565b805463ffffffff8116835260ff8160201c1615156020840152613a9c6040840160ff8360281c16613a30565b613aaf606084018260301c60040b613a62565b613ac960808401605883901c6001600160a01b0316613a23565b50600181015460a0830152600281015460000b61092160c0840182613a69565b60006101208251845263ffffffff60208401511660208501526040830151613b146040860182613a30565b506060830151613b276060860182613a30565b506080830151613b3a6080860182613a62565b5060a0830151613b4d60a0860182613a23565b5060c083015160c085015260e0830151613b6a60e0860182613a69565b50610100808401518282870152613b8383870182613a36565b9695505050505050565b60008351613b9f8184602088016149ba565b835190830190613bb38183602088016149ba565b01949350505050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613b8390830184613a36565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015613c9657603f19888603018452613c84858351613ae9565b94509285019290850190600101613c68565b5092979650505050505050565b60208082528251828201819052600091906040908185019080840286018301878501865b83811015613d3457888303603f19018552815180516001600160a01b0316845287810151608089860181905290613d0082870182613a36565b838a01516001600160581b0316878b015260609384015160ff16939096019290925250509386019390860190600101613cc7565b509098975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015613d7d57835160ff1683529284019291840191600101613d5e565b50909695505050505050565b901515815260200190565b90815260200190565b6020810160028310613dbf57634e487b7160e01b600052602160045260246000fd5b91905290565b600060208252612e086020830184613a36565b6020808252601590820152746e6f742079657420746f20737461727420766f746560581b604082015260600190565b6020808252602b908201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560408201526a74206f6620626f756e647360a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b6020808252600d908201526c185b1c9958591e481d9bdd1959609a1b604082015260600190565b6020808252600f908201526e1a9d5b99db195c881d1bdbc81bdb19608a1b604082015260600190565b6020808252600e908201526d39b437bab6321031329037b832b760911b604082015260600190565b60208082526026908201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060408201526573686172657360d01b606082015260800190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604082015260600190565b60208082526010908201526f0d2dcecc2d8d2c840dcc2dacad0c2e6d60831b604082015260600190565b6020808252603a908201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726040820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b606082015260800190565b6020808252601d908201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252602b908201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060408201526a191d59481c185e5b595b9d60aa1b606082015260800190565b6020808252600f908201526e0c2d8e4cac2c8f240dedc40c4eae6d608b1b604082015260600190565b6020808252600c908201526b30b63932b0b23c9037b832b760a11b604082015260600190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776040820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b606082015260800190565b602080825260129082015271696e646578206f7574206f662072616e676560701b604082015260600190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252601390820152726e6f742079657420746f20656e6420766f746560681b604082015260600190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252600f908201526e1a5b9d985b1a5908189d5cda081251608a1b604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526017908201527661747461636b65722063616e2774206f76657274616b6560481b604082015260600190565b60208082526010908201526f33b2b732b930ba34b7b71032b93937b960811b604082015260600190565b6020808252601690820152756e6f7420696e2070726f706f73696e6720737461676560501b604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252601390820152726e6f2070726f706f73616c20746f20766f746560681b604082015260600190565b6020808252601d908201527f717565727920666f72206e6f6e6578697374616e74206a756e676c6572000000604082015260600190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b6020808252601190820152703737ba1037baba1037b31036b0b933b4b760791b604082015260600190565b6020808252601390820152726e6f7420696e20766f74696e6720737461676560681b604082015260600190565b6020808252600e908201526d1b9bdd08195b9bdd59da08189a5960921b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602c908201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60408201526b7574206f6620626f756e647360a01b606082015260800190565b6020808252600d908201526c37baba1037b31036b0b933b4b760991b604082015260600190565b6020808252601d908201527f717565727920666f72206e6f6e6578697374656e74206a756e676c6572000000604082015260600190565b6020808252600e908201526d185b1c9958591e4818db1bdcd95960921b604082015260600190565b6020808252600990820152683737ba1037bbb732b960b91b604082015260600190565b815163ffffffff16815260208083015115159082015260408083015115159082015260608083015160040b908201526080808301516001600160a01b03169082015260a0808301519082015260c09182015160000b9181019190915260e00190565b60e081016110fc8284613a70565b600060208252612e086020830184613ae9565b63ffffffff91909116815260200190565b600080821280156001600160ff1b038490038513161561479457614794614a94565b600160ff1b83900384128116156147ad576147ad614a94565b50500190565b60008160040b8360040b82821282647fffffffff038213811516156147da576147da614a94565b82647fffffffff190382128116156147f4576147f4614a94565b50019392505050565b6000821982111561481057614810614a94565b500190565b600060ff821660ff84168060ff0382111561483257614832614a94565b019392505050565b60006001600160581b03828116848216808303821115613bb357613bb3614a94565b60008261486b5761486b614aaa565b600160ff1b82146000198414161561488557614885614a94565b500590565b60008261489957614899614aaa565b500490565b600064ffffffffff808416806148b6576148b6614aaa565b92169190910492915050565b60006001600160ff1b03818413828413808216868404861116156148e8576148e8614a94565b600160ff1b8487128281168783058912161561490657614906614a94565b85871292508782058712848416161561492157614921614a94565b8785058712818416161561493757614937614a94565b505050929093029392505050565b600081600019048311821515161561495f5761495f614a94565b500290565b60008083128015600160ff1b85018412161561498257614982614a94565b6001600160ff1b038401831381161561499d5761499d614a94565b50500390565b6000828210156149b5576149b5614a94565b500390565b60005b838110156149d55781810151838201526020016149bd565b838111156122a65750506000910152565b6002810460018216806149fa57607f821691505b60208210811415614a1b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415614a3557614a35614a94565b5060010190565b600063ffffffff80831681811415614a5657614a56614a94565b6001019392505050565b600060ff821660ff811415614a7757614a77614a94565b60010192915050565b600082614a8f57614a8f614aaa565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461352257600080fd5b801515811461352257600080fd5b6001600160e01b03198116811461352257600080fdfefa534782d33171b4fd6bad477513fbf21d9c8d47c60cd6cb4dd49ba52a6b5cb6a2646970667358221220cceec9c78e4e6abb306aab8a4e6b46f093a004578eef84184b61a188be2b012d64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "details": "Setup PaymentSplitter"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "payee(uint256)": {
        "details": "Getter for the address of the payee number `index`."
      },
      "release(address)": {
        "details": "Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals."
      },
      "released(address)": {
        "details": "Getter for the amount of Ether already released to a payee."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "shares(address)": {
        "details": "Getter for the amount of shares held by an account."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalReleased()": {
        "details": "Getter for the total amount of Ether already released."
      },
      "totalShares()": {
        "details": "Getter for the total shares held by payees."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "camp(uint256,uint8)": {
        "notice": "See {JungleInterface-camp}"
      },
      "close(uint256)": {
        "notice": "See {MetaJungleInterface-close}."
      },
      "endVote()": {
        "notice": "See {JungleInterface-endVote}"
      },
      "gank(uint256)": {
        "notice": "See {MetaJungleInterface-gank}."
      },
      "generation()": {
        "notice": "Current generation"
      },
      "getAddrOfJGR()": {
        "notice": "Return address of JGR contract"
      },
      "getAllProposals()": {
        "notice": "Return all proposals' contents"
      },
      "getJunglerData(uint256)": {
        "notice": "Return jungler data given jungler ID"
      },
      "getJunglerOnBush(uint8)": {
        "notice": "Return jungler data given bush ID"
      },
      "getJunglerProfile(uint256)": {
        "notice": "Get ceratin jungler profile"
      },
      "getJunglerProfileOnBush(uint8)": {
        "notice": "Return jungler profile given bush ID"
      },
      "getOwnerJunglerList(address)": {
        "notice": "Get all profile of junlers of given owner"
      },
      "getVotableBushesByOwner(address)": {
        "notice": "Return votable bushes given owner"
      },
      "open(uint256,bytes32,int8)": {
        "notice": "See {MetaJungleInterface-open}."
      },
      "propose(string,uint8)": {
        "notice": "See {JungleInterface-propose}"
      },
      "stage()": {
        "notice": "Stage of proposing or voting"
      },
      "startVote()": {
        "notice": "See {JungleInterface-startVote}"
      },
      "summon()": {
        "notice": "see {MetaJungleInterface-summon}"
      },
      "tokenURI(uint256)": {
        "notice": "Customized {ERC721-tokenURI}"
      },
      "vote(uint256,uint8[])": {
        "notice": "See {JungleInterface-vote}"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1072,
        "contract": "contracts/MetaJungle.sol:MetaJungle",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1074,
        "contract": "contracts/MetaJungle.sol:MetaJungle",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1078,
        "contract": "contracts/MetaJungle.sol:MetaJungle",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1082,
        "contract": "contracts/MetaJungle.sol:MetaJungle",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1086,
        "contract": "contracts/MetaJungle.sol:MetaJungle",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1092,
        "contract": "contracts/MetaJungle.sol:MetaJungle",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2011,
        "contract": "contracts/MetaJungle.sol:MetaJungle",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2015,
        "contract": "contracts/MetaJungle.sol:MetaJungle",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2018,
        "contract": "contracts/MetaJungle.sol:MetaJungle",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2022,
        "contract": "contracts/MetaJungle.sol:MetaJungle",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4068,
        "contract": "contracts/MetaJungle.sol:MetaJungle",
        "label": "generation",
        "offset": 0,
        "slot": "10",
        "type": "t_uint32"
      },
      {
        "astId": 4072,
        "contract": "contracts/MetaJungle.sol:MetaJungle",
        "label": "_ens",
        "offset": 4,
        "slot": "10",
        "type": "t_contract(ENS)4051"
      },
      {
        "astId": 4076,
        "contract": "contracts/MetaJungle.sol:MetaJungle",
        "label": "_jgrContract",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IERC20)1021"
      },
      {
        "astId": 4082,
        "contract": "contracts/MetaJungle.sol:MetaJungle",
        "label": "_junglerData",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(JunglerData)4097_storage)"
      },
      {
        "astId": 3281,
        "contract": "contracts/MetaJungle.sol:MetaJungle",
        "label": "_hideOnBush",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 3286,
        "contract": "contracts/MetaJungle.sol:MetaJungle",
        "label": "_bushTimer",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 3291,
        "contract": "contracts/MetaJungle.sol:MetaJungle",
        "label": "_bushGeneration",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint8,t_uint32)"
      },
      {
        "astId": 3295,
        "contract": "contracts/MetaJungle.sol:MetaJungle",
        "label": "stage",
        "offset": 0,
        "slot": "16",
        "type": "t_enum(Stage)3298"
      },
      {
        "astId": 3632,
        "contract": "contracts/MetaJungle.sol:MetaJungle",
        "label": "_latestUpdateTime",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 3646,
        "contract": "contracts/MetaJungle.sol:MetaJungle",
        "label": "_proposals",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_struct(Proposal)3641_storage)dyn_storage"
      },
      {
        "astId": 3651,
        "contract": "contracts/MetaJungle.sol:MetaJungle",
        "label": "_baseURIofGeneration",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint32,t_string_storage)"
      },
      {
        "astId": 130,
        "contract": "contracts/MetaJungle.sol:MetaJungle",
        "label": "_totalShares",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 132,
        "contract": "contracts/MetaJungle.sol:MetaJungle",
        "label": "_totalReleased",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 136,
        "contract": "contracts/MetaJungle.sol:MetaJungle",
        "label": "_shares",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 140,
        "contract": "contracts/MetaJungle.sol:MetaJungle",
        "label": "_released",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 143,
        "contract": "contracts/MetaJungle.sol:MetaJungle",
        "label": "_payees",
        "offset": 0,
        "slot": "24",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Proposal)3641_storage)dyn_storage": {
        "base": "t_struct(Proposal)3641_storage",
        "encoding": "dynamic_array",
        "label": "struct JungleGovernance.Proposal[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ENS)4051": {
        "encoding": "inplace",
        "label": "contract ENS",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1021": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(Stage)3298": {
        "encoding": "inplace",
        "label": "enum JungleBush.Stage",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_int40": {
        "encoding": "inplace",
        "label": "int40",
        "numberOfBytes": "5"
      },
      "t_int8": {
        "encoding": "inplace",
        "label": "int8",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(JunglerData)4097_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Jungler.JunglerData)",
        "numberOfBytes": "32",
        "value": "t_struct(JunglerData)4097_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(JunglerData)4097_storage": {
        "encoding": "inplace",
        "label": "struct Jungler.JunglerData",
        "members": [
          {
            "astId": 4084,
            "contract": "contracts/MetaJungle.sol:MetaJungle",
            "label": "generation",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4086,
            "contract": "contracts/MetaJungle.sol:MetaJungle",
            "label": "isOpen",
            "offset": 4,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4088,
            "contract": "contracts/MetaJungle.sol:MetaJungle",
            "label": "isCampping",
            "offset": 5,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4090,
            "contract": "contracts/MetaJungle.sol:MetaJungle",
            "label": "power",
            "offset": 6,
            "slot": "0",
            "type": "t_int40"
          },
          {
            "astId": 4092,
            "contract": "contracts/MetaJungle.sol:MetaJungle",
            "label": "proxy",
            "offset": 11,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4094,
            "contract": "contracts/MetaJungle.sol:MetaJungle",
            "label": "openPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 4096,
            "contract": "contracts/MetaJungle.sol:MetaJungle",
            "label": "leverage",
            "offset": 0,
            "slot": "2",
            "type": "t_int8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Proposal)3641_storage": {
        "encoding": "inplace",
        "label": "struct JungleGovernance.Proposal",
        "members": [
          {
            "astId": 3634,
            "contract": "contracts/MetaJungle.sol:MetaJungle",
            "label": "proposer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3636,
            "contract": "contracts/MetaJungle.sol:MetaJungle",
            "label": "baseURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3638,
            "contract": "contracts/MetaJungle.sol:MetaJungle",
            "label": "bid",
            "offset": 0,
            "slot": "2",
            "type": "t_uint88"
          },
          {
            "astId": 3640,
            "contract": "contracts/MetaJungle.sol:MetaJungle",
            "label": "voteCount",
            "offset": 11,
            "slot": "2",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint88": {
        "encoding": "inplace",
        "label": "uint88",
        "numberOfBytes": "11"
      }
    }
  }
}